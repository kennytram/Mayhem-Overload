{"version":3,"file":"main.js","mappings":"qCA0JA,IAAIA,EAAc,CACdC,QAAS,CACL,2BACA,2BACA,2BACA,2BACA,2BACA,4BAEJC,aAAc,CACV,2CACA,wCACA,uCAEJC,KAAM,CACF,kDACA,kDACA,kDACA,mDAEJC,IAAK,CACD,uBACA,yBACA,yBACA,0BACA,4BACA,2BACA,8BAGJC,EAAY,CACZC,GAAI,CAAC,8BAA+B,8BAClC,8BAA+B,+BACjCC,KAAM,CAAC,gCAAiC,gCACtC,gCAAiC,iCACnCC,KAAM,CAAC,gCAAiC,gCACtC,gCAAiC,iCACnCC,MAAO,CAAC,iCAAkC,iCACxC,iCAAkC,mCAWxC,EA3MA,MAEIC,YAAYC,EAAOC,EAAQC,EAAWC,EAAKC,EAAWC,EAAgBC,GAClEC,KAAKP,MAAQA,EACbO,KAAKN,OAASA,EACdM,KAAKL,UAAYA,GAAa,GAC9BK,KAAKJ,IAAMA,EACXI,KAAKH,UAAYA,EACG,QAAjBG,KAAKH,YAAmBG,KAAKJ,IAAIK,OAAS,IAC7CD,KAAKE,KAAM,EACXF,KAAKG,YAAa,EAClBH,KAAKF,eAAiBA,EACtBE,KAAKI,UAAY,EACjBJ,KAAKD,SAAWA,EAEhBC,KAAKK,MAAQ,EACbL,KAAKM,WAAa,GAGlBN,KAAKO,YAAc,IACvB,CAEAC,MAAMC,GACFT,KAAKE,KAAM,EACXF,KAAKG,YAAa,EAClBH,KAAKI,UAAY,EACjBJ,KAAKK,MAAQ,EACbL,KAAKM,WAAa,GACfN,KAAKO,aAAaG,aAAaV,KAAKO,aACvCP,KAAKO,YAAc,KAEnBP,KAAKN,OAAOc,MAAMC,GAClB,IAAI,MAAME,KAAYX,KAAKL,UAAWgB,EAASH,MAAMC,EAAKT,KAAKN,OACnE,CAEAkB,aAAaC,IACO,IAAbb,KAAKE,KACJF,KAAKP,MAAMqB,QAAQD,EAE3B,CAEAE,UACIf,KAAKI,WAAaJ,KAAKN,OAAOsB,MAClC,CAEAC,aAAapB,GACT,GAAiB,YAAdA,EACIG,KAAKI,WAAa,KACjBJ,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,GAC5CkB,KAAKE,KAAM,GAEPF,KAAKI,WAAa,GACtBJ,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,GAExCkB,KAAKI,WAAa,GACtBJ,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,GAExCkB,KAAKI,WAAa,GACtBJ,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,GAExCkB,KAAKI,WAAa,GACtBJ,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,GAG5CkB,KAAKN,OAAOwB,OAASpC,EAAqB,QAAE,QAI/C,GAAiB,YAAde,EAAyB,CAC7B,IAAI,MAAMc,KAAYX,KAAKL,UAAW,CAClC,MAAMwB,EAAMrC,EAAkB,KAAEsC,QAAQT,EAASO,QACjDP,EAASO,OAASpC,EAAkB,MAAGqC,EAAI,GAAGrC,EAAkB,KAAEuC,OACtE,CACA,GAAkB,IAAfrB,KAAKK,MAAa,CACjB,MAAMiB,EAAOtB,KACbsB,EAAKf,YAAcgB,YAAW,WACvBD,EAAK5B,OAAO8B,UACXF,EAAKpB,KAAM,EAEnB,GAAG,IACP,CACAF,KAAKK,OAAS,CAClB,MACK,GAAiB,QAAdR,EAAqB,CACzB,MAAMyB,EAAOtB,KACPyB,EAAO,CAAC,KAAK,OAAO,OAAO,SAEjC,IAD8B,IAA3BzB,KAAKM,WAAWe,SAAcC,EAAK3B,UAAU,GAAGuB,OAAS,MACtDlB,KAAKM,WAAWe,OAAS,GAC3BrB,KAAKM,WAAWoB,KAAKD,EAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKJ,UAC1DE,YAAW,WACPD,EAAK3B,UAAU,GAAGuB,OAAS/B,EAAUmC,EAAKhB,WAAWgB,EAAKjB,QAAQiB,EAAKjB,OACvEiB,EAAKjB,OACT,GAAG,IAAML,KAAKM,WAAWe,QAE7B,GAA8B,IAA3BrB,KAAKM,WAAWe,OACf,GAAGrB,KAAKN,OAAOoC,WAAWT,OAAS,EAC/B,OAAOrB,KAAKN,OAAOoC,WAAWC,IAAI,IAC9B,IAAK,KACD/B,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxC,MACJ,IAAK,OACDkB,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxC,MACJ,IAAK,OACDkB,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxC,MACJ,IAAK,QACDkB,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxC,MACJ,QACIkB,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,QAI7CkD,KAAKC,UAAUjC,KAAKN,OAAOoC,cAAgBE,KAAKC,UAAUjC,KAAKM,aAC9DN,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxCkB,KAAKE,KAAM,IAGXF,KAAKN,OAAOwB,OAASpC,EAAiB,IAAE,GACxCkB,KAAKG,YAAa,EAKlC,CACJ,CAEA+B,cAAcC,GACV,IAAgB,IAAbnC,KAAKE,MAAkBF,KAAKG,WAAY,CACnCH,KAAKN,OAAO8B,UACZxB,KAAKG,YAAa,GAGtBH,KAAKiB,aAAajB,KAAKH,WAEvB,IAAI,MAAMc,KAAYX,KAAKL,UAEvBgB,EAASG,QAAQqB,EAAWnC,KAAKM,YAI9BK,EAASyB,YAAYC,SAAS,UAAY1B,EAAS2B,aAAatC,KAAKN,UACpEM,KAAKN,OAAO8B,SAAU,EACtBxB,KAAKN,OAAOwB,OAAS,mDAG7BlB,KAAKN,OAAOoB,QAAQqB,EACxB,CACJ,GCkEJ,MAAMI,EAAY,CACdC,QAAU,GACVC,WAAa,EACbC,aAAe,EACfC,UAAW,GAIf,MA/NA,MAEInD,YAAY0B,EAAQ0B,EAASR,GACzBpC,KAAK6C,KAAO,EACZ7C,KAAK8C,KAAO,EACZ9C,KAAKkB,OAASA,EACdlB,KAAK4C,QAAUA,EACf5C,KAAKoC,YAAcA,EACnBpC,KAAKwB,SAAU,EACfxB,KAAK+C,YAAc,KACnB/C,KAAKgD,aAAe,KACpBhD,KAAKiD,IAAM,EACXjD,KAAKkD,UAAW,EAChBlD,KAAK8B,WAAa,EACtB,CAEAqB,oBAAoB1C,GAAkB,IAAbf,EAAM,uDAAC,KAC5B,GAAoB,cAAjBM,KAAK4C,QACe,iDAAhB5C,KAAKkB,SACJlB,KAAKkB,OAAS,yCAElBlB,KAAK6C,KAAOlB,KAAKC,MAAMnB,EAAI2C,OAAOC,MAAQ5C,EAAI2C,OAAOC,MAAM,GAC3DrD,KAAK8C,KAAOnB,KAAKC,MAAMnB,EAAI2C,OAAOE,OAAO,GAGzCf,EAAUE,WAAad,KAAKC,MAAMnB,EAAI2C,OAAOE,OAAO,IACpDf,EAAUG,aAAef,KAAKC,MAAMnB,EAAI2C,OAAOE,OAAO,IACtDf,EAAUC,QAAUb,KAAK4B,IAAI5B,KAAKC,MAAMnB,EAAI2C,OAAOC,MAAM,KAAO,SAE/D,GAAoB,eAAjBrD,KAAK4C,QACT5C,KAAK6C,KAAOlB,KAAKC,MAAMnB,EAAI2C,OAAOC,MAAM,GACxCrD,KAAK8C,KAAOrC,EAAI2C,OAAOE,YAEtB,GAAoB,YAAjBtD,KAAK4C,QACT5C,KAAK6C,KAAO,EACZ7C,KAAK8C,KAAO,OAEX,GAAoB,WAAjB9C,KAAK4C,SAAwB5C,KAAKoC,YAAYC,SAAS,SAC3D,GAAa,MAAV3C,EAAgB,CACf,GACIM,KAAK6C,KAAMpC,EAAI2C,OAAOC,MAAQ1B,KAAKE,eAC/BF,KAAK6B,IAAIxD,KAAK6C,KAAOnD,EAAOmD,OAASpC,EAAI2C,OAAOC,MAAM,GAE9D,GACIrD,KAAK8C,KAAMrC,EAAI2C,OAAOE,OAAS3B,KAAKE,eAChCF,KAAK6B,IAAIxD,KAAK8C,KAAOpD,EAAOoD,OAASrC,EAAI2C,OAAOE,OAAO,EACnE,MAEItD,KAAK6C,KAAOpC,EAAI2C,OAAOC,MAAQ1B,KAAKE,SAAYpB,EAAI2C,OAAOC,MAC3DrD,KAAK8C,KAAMrC,EAAI2C,OAAOE,OAAS3B,KAAKE,QAGhD,CAEArB,MAAMC,GAAkB,IAAbf,EAAM,uDAACM,KACdA,KAAKkD,UAAW,EAChBlD,KAAKwB,SAAU,EACfxB,KAAK8B,WAAa,GAClB9B,KAAKmD,oBAAoB1C,EAAKf,EAClC,CAEAoB,QAAQL,GACJ,GAAGT,KAAKkB,OAAQ,CACTlB,KAAKkD,UAAUlD,KAAKyD,QAAQhD,GAC/B,IAAIiD,EAAQ,IAAIC,MAChBD,EAAME,IAAM5D,KAAKkB,OACjB,MAAMI,EAAOtB,KAEb0D,EAAMG,OAAS,WACXvC,EAAKyB,YAAcW,EAAML,MACzB/B,EAAK0B,aAAeU,EAAMJ,OAMvBhC,EAAKsB,QAAQP,SAAS,SACrBf,EAAKuB,KAAOpC,EAAI2C,OAAOC,MAAQ/B,EAAKyB,YACpCzB,EAAK0B,aAAgBvC,EAAI2C,OAAOE,OAEhC7C,EAAIqD,UAAUJ,EAAOpC,EAAKuB,KAAO,EAAGvB,EAAKyB,YAAazB,EAAK0B,eAEtD1B,EAAKsB,QAAQP,SAAS,cAC3Bf,EAAKyB,YAA0B,EAAZW,EAAML,MACzB/B,EAAK0B,aAA4B,EAAbU,EAAMJ,OACvBhC,EAAKE,QACJf,EAAIqD,UAAUJ,EAAOpC,EAAKuB,KAAOvB,EAAKyB,YAAazB,EAAKwB,KACpDxB,EAAKyB,YAAazB,EAAK0B,cAI3BvC,EAAIqD,UAAUJ,EAAO/B,KAAKC,MAAMN,EAAKuB,KAAOvB,EAAKyB,YAAY,GAAIzB,EAAKwB,KAClExB,EAAKyB,YAAazB,EAAK0B,eAG1B1B,EAAKsB,QAAQP,SAAS,eAC3Bf,EAAKyB,YAA0B,EAAZW,EAAML,MACzB/B,EAAK0B,aAA4B,EAAbU,EAAMJ,OAC1B7C,EAAIqD,UAAUJ,EAAO/B,KAAKC,MAAMN,EAAKuB,KAAKvB,EAAKyB,YAAY,GAAIzB,EAAKwB,KAAKxB,EAAK0B,aAC1E1B,EAAKyB,YAAazB,EAAK0B,eAEtB1B,EAAKsB,QAAQP,SAAS,YAC3Bf,EAAKyB,YAAcW,EAAML,MACzB/B,EAAK0B,aAAeU,EAAMJ,OAC1B7C,EAAIqD,UAAUJ,EAAOpC,EAAKuB,KAAMvB,EAAKwB,KACjCxB,EAAKyB,YAAazB,EAAK0B,cAC3BvC,EAAIqD,UAAUJ,EAAOjD,EAAI2C,OAAOC,MAAQ/B,EAAKyB,YAAazB,EAAKwB,KAC3DxB,EAAKyB,YAAazB,EAAK0B,eAEtB1B,EAAKc,YAAYC,SAAS,UAAYf,EAAKsB,QAAQP,SAAS,WACjEf,EAAKyB,YAA0B,EAAZW,EAAML,MACzB/B,EAAK0B,aAA4B,EAAbU,EAAMJ,OAC1BhC,EAAKuB,MAAQ,EACVvB,EAAKuB,MAAQpC,EAAI2C,OAAOC,MAAQ/B,EAAKyB,aACpCzB,EAAK6B,oBAAoB1C,GAE7BA,EAAIqD,UAAUJ,EAAOpC,EAAKuB,KAAOvB,EAAKyB,YAAazB,EAAKwB,KACpDxB,EAAKyB,YAAazB,EAAK0B,eAI3BvC,EAAIqD,UAAUJ,EAAOpC,EAAKuB,KAAOa,EAAML,MAAO/B,EAAKwB,KAAOY,EAAMJ,OAAQ7C,EAAI2C,OAAOC,MAAM,GAAI5C,EAAI2C,OAAOE,OAAO,GAGvH,CACJ,CASJ,CAEAS,KAAKC,EAAKvD,GACN,MAAMwD,EAAUtC,KAAKC,MAAM5B,KAAK6C,KAAOmB,EAAI,GAAKhE,KAAK+C,aAC/CmB,EAAUvC,KAAKC,MAAM5B,KAAK8C,KAAOkB,EAAI,IACxCC,GAAW,GAAKA,GAAWxD,EAAI2C,OAAOC,MAAMrD,KAAK+C,aAAemB,GAAW,GAAKA,GAAWzD,EAAI2C,OAAOE,OAAOtD,KAAKgD,eACjHhD,KAAK6C,MAAQmB,EAAI,GACjBhE,KAAK8C,MAAQkB,EAAI,GAEzB,CAEAG,UAAUH,EAAKvD,GAGXT,KAAK6C,MAAQmB,EAAI,GACjBhE,KAAK8C,MAAQkB,EAAI,EACrB,CAGA1B,aAAa5C,GAMX,IAAI0E,GAAY,EALA,IAACC,EAAGC,EASpB,OAToBA,EAMH5E,GANA2E,EAMNrE,MALJ6C,KAAOyB,EAAEzB,KAAOyB,EAAEvB,aAAesB,EAAExB,KAAOwB,EAAEtB,YAAcuB,EAAEzB,MAC9DwB,EAAEvB,KAAOwB,EAAExB,KAAOwB,EAAEtB,cAAgBqB,EAAEvB,KAAOuB,EAAErB,aAAesB,EAAExB,OAKnEsB,GAAY,GAEPA,CACT,CAEAX,QAAQhD,GACJT,KAAKkD,UAAW,EACblD,KAAK8C,KAAO,GACX9C,KAAK8C,KAAO,EACZ9C,KAAKiD,IAAM,GAGRjD,KAAK8C,KAAO9C,KAAKgD,cAAevC,EAAI2C,OAAOE,QAC1CtD,KAAK8C,KAAOrC,EAAI2C,OAAOE,OAAStD,KAAKgD,aACrChD,KAAKwB,SAAU,EACfxB,KAAKkB,OAAS,gDAGdlB,KAAK8C,MAAQ9C,KAAKiD,IAG1BjD,KAAKiD,KAAOV,EAAUC,QAClBb,KAAK6B,IAAIxD,KAAKiD,KAAOV,EAAUG,eAC3B1C,KAAKiD,IAAM,EACbjD,KAAKiD,IAAMV,EAAUG,aAGrB1C,KAAKiD,KAAgC,EAA1BV,EAAUG,aAG/B,CAEA1B,OACI,OAAOuB,EAAUI,SACrB,CAEA4B,OACIvE,KAAKiD,KAAO,EAAIV,EAAUE,WAC1BzC,KAAKkB,OAAS,qCACd,MAAMI,EAAOtB,KACbuB,YAAW,WACPD,EAAKJ,OAAS,kCAClB,GAAE,KACFK,YAAW,WACPD,EAAKJ,OAAS,uCAClB,GAAE,IACN,CAEAhC,IAAI8E,GACAhE,KAAK8B,WAAWJ,KAAKsC,EACzB,GCzKJ,EA1CA,MAEIxE,YAAYC,EAAO+E,GACfxE,KAAKP,MAAQA,EACbO,KAAKwE,WAAaA,CAEtB,CAEA1D,QAAQL,GACJ,GAAGT,KAAKP,MAAO,CACX,IAAIiE,EAAQ,IAAIC,MAChBD,EAAME,IAAM5D,KAAKP,MAEdO,KAAKwE,WACJd,EAAMG,OAAS,WACXpD,EAAIgE,UAAU,EAAG,EAAGhE,EAAI2C,OAAOC,MAAO5C,EAAI2C,OAAOE,SACjDoB,GAAU,IACG,IACTA,EAAS,KACTC,GAAUlE,EAAI2C,OAAOE,SACRI,EAAMJ,SACfqB,EAAS,IAGjBlE,EAAIqD,UAAUJ,EAAOgB,EAAQC,EAAQ,GAAI,IACrC,EAAG,EAAGlE,EAAI2C,OAAOC,MAAO5C,EAAI2C,OAAOE,OAE3C,EAGAI,EAAMG,OAAS,WACXpD,EAAIqD,UAAUJ,EAAO,EAAG,EAAEjD,EAAI2C,OAAOC,MAAM5C,EAAI2C,OAAOE,OAC1D,CAER,MAEI7C,EAAImE,UAAY,UAChBnE,EAAIoE,SAAS,EAAE,EAAEpE,EAAI2C,OAAOC,MAAM5C,EAAI2C,OAAOE,OAErD,GAIAoB,EAAS,IACTC,EAAS,ECqSb,MAAMG,EAAS,CACXC,KAAM,IAAIC,EAAM,kCAAkC,GAClDC,KAAM,IAAID,EAAM,wBAAwB,GACxChG,aAAc,IAAIgG,EAAM,yDAAyD,GACjF9F,IAAK,IAAI8F,EAAM,yBAAyB,IAGtCE,EAAU,CACZH,KAAM,IAAII,EAAO,KAAM,SAAU,CAAC,WAClCF,KAAM,IAAIE,EAAO,wBAAyB,YAAa,CAAC,WACxDnG,aAAc,IAAImG,EAAO,wCAAwC,YAAY,CAAC,WAC9EjG,IAAK,IAAIiG,EAAO,yBAA0B,aAAc,CAAC,YAGvDC,EAAY,CACdL,KAAO,GACPE,KAAO,GACPjG,aAAe,CACX,IAAImG,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,gBAC/E,IAAIA,EAAO,+CAAgD,SAAU,CAAC,QAAS,iBAEnFjG,IAAK,CACD,IAAIiG,EAAO,2BAA4B,UAAW,CAAC,eAWrDE,EAAa,CAIfJ,KAAM,IAAIK,EAAUR,EAAa,KAC/BI,EAAc,KACdE,EAAgB,KAAG,IAAIG,MAAM,iCAC7B,UAZK,kBAYoB,wBAC3BvG,aAAc,IAAIsG,EAAUR,EAAqB,aAC/CI,EAAsB,aACtBE,EAAwB,aAAG,IAAIG,MAAM,0CACrC,UAfa,OAeoB,oBACnCrG,IAAK,IAAIoG,EAAUR,EAAY,IAC7BI,EAAa,IACbE,EAAe,IAAG,IAAIG,MAAM,wBAC5B,MAlBG,aAkBiB,sBAI1B,IAAIC,EAAW,GACf,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACnBD,EAAS9D,KAAM,eAAc+D,SAGjC,IAAIC,EAAa,GACjB,IAAI,IAAID,EAAI,EAAGA,EAAI,EAAGA,IAClBC,EAAWhE,KAAM,wBAAuB+D,SAI5C,IAAIE,EAAe,IAAIJ,MAAM,sBACzBK,EAAa,IAAIL,MAAM,wBACvBM,EAAoB,IAAIN,MAAM,iCAC9BO,EAAkB,IAAIP,MAAM,0CAC5BQ,EAAgB,IAAIR,MAAM,uBAC1BS,EAAe,IAAIT,MAAM,sBACzBU,EAAa,IAAIV,MAAM,oBACvBW,EAAc,IAAIX,MAAM,+BACxBY,EAAa,IAAIZ,MAAM,oBAE3B,MAAMa,EAAW,CAACT,EAAcC,EAAWC,EAAmBC,EACxDC,EAAeC,EAAcC,EAAYC,EAAaC,GAE5D,IAAIE,EAAU,KACVC,GAAU,EAEVC,EAAW,CAAC,IAAI,KAUpB,SAASC,IACL,KAAMD,EAASlF,OAAS,GACpBoF,IAAIC,OAAOH,EAASI,MAE5B,CAZAF,IAAI,KAAK,KACLH,GAAWA,EACX,IAAI,MAAMM,KAASR,EAAUQ,EAAMC,QAC/BP,GAAWD,IAAYD,EAASrE,IAAI,IACpCqE,EAASrE,IAAI,GAAG+E,MACpB,IC7aJ,MAAM1D,EAAS2D,SAASC,cAAc,WAChCC,EAAgBF,SAASC,cAAc,mBAC7C5D,EAAOC,MAAQ4D,EAAcC,YAC7B9D,EAAOE,OAAS2D,EAAcE,aAE9B,IAAIb,GAAU,EACd,IAAIc,EAAY,IAAI7B,MAAM,8BAC1B6B,EAAUN,OACVM,EAAUnH,OAAS,GAEnBwG,IAAI,KAAK,KACFW,IACCd,GAAWA,EACXc,EAAUP,QACNP,GAASc,EAAUN,OAC3B,IAEJL,IAAI,KAAK,KACLY,OAAOC,SAASC,QAAQ,IAG5B,MAAMC,EAAWT,SAASC,cAAc,gBAaxCQ,EAASC,iBAAiB,SAZb,WACTD,EAASE,UAAW,EACpBN,EAAUP,QACVO,EAAY,KACZO,cAAcC,GACd,MAAMX,EAAgBF,SAASC,cAAc,mBAC7C5D,EAAOC,MAAQ4D,EAAcC,YAC7B9D,EAAOE,OAAS2D,EAAcE,aAC9BJ,SAASC,cAAc,WAAWa,MAAMC,OAAS,GAC/B,ID7BtB,MACItI,cAIIQ,KAAKS,IAAMsG,SAASgB,eAAe,UAAUC,WAAW,MACxDhI,KAAKiI,SAAWlB,SAASgB,eAAe,SACxC/H,KAAKD,SAAWgH,SAASgB,eAAe,YACxC/H,KAAKkI,SAAWnB,SAASgB,eAAe,aAExC/H,KAAKmI,SAAW,GAChBnI,KAAKoI,QAAU,GACfpI,KAAKqI,MAAQ,EACbrI,KAAKsI,MAAQ,EAEbtI,KAAKuI,UAAY,KAEjBvI,KAAKwI,SAAU,EACfxI,KAAKyI,uBAAwB,EAC7BzI,KAAK0I,SAAU,EAEf1I,KAAK2I,aAAe,IACxB,CAGA7B,OACI9G,KAAKuI,UAAYvI,KAAK4I,qBACnB5I,KAAKuI,WAEJvI,KAAKuI,UAAU/H,MAAMR,KAAKS,KAC1B+F,IACAxG,KAAK6I,gBAAgB7I,KAAKuI,WACM,YAA7BvI,KAAKuI,UAAU1I,YACdG,KAAKkI,SAAStE,IAAM,8BAExB5D,KAAK8I,aACL9I,KAAK+I,aACL/I,KAAKwI,SAAU,EAEfxI,KAAKc,WAGLkI,QAAQC,IAAI,4BAEpB,CAGAL,qBACI,MAAMM,EAAaC,OAAOC,OAAO/D,GAC3BgE,EAAe1H,KAAKC,MAAMD,KAAKE,SAAWqH,EAAW7H,QAO3D,OANA6H,EAAWG,GAAc7I,MAAMR,KAAKS,KAEpC4F,EAAU6C,EAAWG,GAAczJ,KAC/B0G,GAAWD,GAASA,EAAQS,OAChCV,EAAS1E,KAAKwH,EAAWG,GAAczJ,KACvCI,KAAKD,SAASuJ,UAAYJ,EAAWG,GAActJ,SAC5CmJ,EAAWG,EACtB,CAGAvI,UACI,IAAoB,IAAjBd,KAAKwI,QAAkB,CAEtB,GADAxI,KAAKuJ,kBACDvJ,KAAKyI,wBAAgD,IAAvBzI,KAAKuI,UAAUrI,MAAiC,IAAjBF,KAAK0I,SAClE1I,KAAKuI,UAAUpI,YAAcH,KAAKsI,MAAQ,EAC1C,CAcI,GAbAX,cAAc3H,KAAK2I,cAChB3I,KAAKuI,UAAUhI,aAAaG,aAAaV,KAAKuI,UAAUhI,aAE3DiG,IAEAxG,KAAKuI,UAAUrI,KAAM,EACjBF,KAAK0I,SAAY1I,KAAKuI,UAAUpI,aAChCH,KAAKwJ,iBACLxJ,KAAKiI,SAASqB,UAAa,UAAStJ,KAAKqI,SAG7CrI,KAAKyI,uBAAwB,EAE1B9C,EAAa8D,SAAWnD,IAAYtG,KAAK0I,QAAS,CACjD,IAAI,MAAM9B,KAASR,EACfQ,EAAMC,QACND,EAAM8C,YAAc,EAEpB1J,KAAKuI,UAAUpI,YACfwF,EAAamB,MAErB,CACG9G,KAAKuI,UAAUpI,aACO,IAAlBH,KAAKmI,SACJnI,KAAKD,SAASuJ,UAAY,gBAG1BtJ,KAAKD,SAASuJ,UAAY,WAGhBvC,SAASgB,eAAgB,QAAO/H,KAAKsI,SAC7CT,MAAM8B,QAAU,OACtB3J,KAAKsI,QACDhC,GACAP,EAAce,QAGtB9G,KAAK0I,SAAU,EACf1I,KAAKuI,UAAUpI,YAAa,EAE5BiG,EAASO,MAET,MAAMrF,EAAOtB,KAGbuB,YAAW,WACPD,EAAKiH,UAAYjH,EAAKsH,qBACtBtH,EAAKuH,gBAAgBvH,EAAKiH,WAE1BjH,EAAKwH,aACLxH,EAAKyH,aACLzH,EAAKmH,uBAAwB,CAGjC,GAAG,KACX,MACK,GAAGzI,KAAKsI,OAAS,GAAKtI,KAAKuI,UAAUpI,WAAY,CAClDqG,IACAH,EAAU,KACVsB,cAAc3H,KAAK2I,cACnB3I,KAAKD,SAASuJ,UAAY,YAC1B,MAAMhI,EAAOtB,KACbuB,YAAW,WACPD,EAAKvB,SAASuJ,UAAY,oBAC9B,GAAG,KACH,IAAI,MAAM1C,KAASR,EACfQ,EAAMC,QACND,EAAM8C,YAAc,EAEa,SAAlC1J,KAAKuI,UAAUzI,iBAEVwG,GAASR,EAAgBgB,QAEnBC,SAASgB,eAAgB,QAAO/H,KAAKsI,SAC7CT,MAAM8B,QAAU,OACtB3J,KAAKsI,QACDhC,GACAH,EAAWW,OAEf9G,KAAKwI,SAAU,CACnB,MACQxI,KAAKmI,SAAW,IAAMnI,KAAKyI,wBAC/BzI,KAAKuI,UAAU3H,aAAaZ,KAAKS,KACjCT,KAAKuI,UAAUrG,cAAclC,KAAKS,MAEtC4G,OAAOuC,sBAAsB5J,KAAKc,QAAQ+I,KAAK7J,MAEnD,CAEJ,CAEAwJ,iBACIxJ,KAAKqI,OACT,CAEAU,aACI/I,KAAK8J,YACT,CAEAC,YACIrJ,aAAaV,KAAK2I,aACtB,CAEAqB,aAAazB,GACTvI,KAAKuI,UAAYA,CACrB,CAEA0B,iBACIjK,KAAKoI,SACT,CAEA0B,aACI,MAAMxI,EAAOtB,KACbsB,EAAKqH,aAAeuB,aAAY,KAC5B5I,EAAK6G,WACgB,IAAlB7G,EAAK6G,WAC2B,WAA5BnI,KAAKuI,UAAU1I,WAEdyB,EAAK4G,SAAStE,IAAM4B,EAASzD,IAAI,GACjCT,EAAKiH,UAAUpI,YAAa,GAG5BmB,EAAK4G,SAAStE,IAAM8B,EAAW3D,IAAI,GAE3C,GACD,IACP,CAEA+G,aACoC,YAA7B9I,KAAKuI,UAAU1I,WACdmJ,QAAQC,IAAI,QACZjJ,KAAKmI,SAAW,EAChBnI,KAAKkI,SAAStE,IAAM8B,EAAW,KAG/B1F,KAAKmI,SAAWnI,KAAKoI,QAErBpI,KAAKkI,SAAStE,IAAM4B,EAAS,GAGrC,CAEA+D,iBACI,IAAIY,EAAYxI,KAAKC,MAAM5B,KAAKoI,QAAU,GAC1C,GAAgC,YAA7BpI,KAAKuI,UAAU1I,UAAyB,CACvCsK,EAAY,EACZ,IAAI,IAAI1E,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAAGzF,KAAKmI,SAAWgC,EAAU1E,EAAG,CAC5BzF,KAAKkI,SAAStE,IAAM8B,EAAW3D,IAAI,EAAE0D,GACrC,KACJ,CAER,MAEI,IAAI,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAAGzF,KAAKmI,SAAWgC,EAAU1E,EAAG,CAC5BzF,KAAKkI,SAAStE,IAAM4B,EAASzD,IAAI,EAAE0D,GACnC,KACJ,CAIZ,CAGAoD,gBAAgBN,GAEZ,OAAOA,EAAUzI,gBACb,IAAK,OACD2G,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC,GAAI/D,KAAKS,IAAI2C,OAAOE,OAAO,IAAKtD,KAAKS,OAChFgG,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC,EAAG/D,KAAKS,IAAI2C,OAAOE,OAAO,IAAKtD,KAAKS,OAC/EgG,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,EAAE/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAC/EgG,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAC9EgG,IAAI,MAAM,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC,GAAI/D,KAAKS,IAAI2C,OAAOE,OAAO,IAAKtD,KAAKS,OACjFgG,IAAI,QAAQ,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC,EAAG/D,KAAKS,IAAI2C,OAAOE,OAAO,IAAKtD,KAAKS,OAClFgG,IAAI,QAAQ,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,EAAE/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAClFgG,IAAI,SAAS,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAClFgG,IAAI,SAAS,IAAMzG,KAAKuI,UAAU7I,OAAO0K,SACzC7D,EAAS7E,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,OAAO,QAAQ,SACzD,MACJ,IAAK,kBACD+E,IAAI,SAAS,KACTzG,KAAKuI,UAAUxH,UACZ6E,EAAU6D,SAAWnD,GAASV,EAAUkB,MAAM,IAErDP,EAAS7E,KAAK,SACd,MACJ,IAAK,OACE1B,KAAKuI,YAAWvI,KAAKuI,UAAU7I,OAAOwD,UAAW,GACpDuD,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,EAAE/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAC/EgG,IAAI,KAAK,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAC9EgG,IAAI,QAAQ,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,EAAE/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAClFgG,IAAI,SAAS,IAAMzG,KAAKuI,UAAU7I,OAAOqE,KAAK,CAAC/D,KAAKS,IAAI2C,OAAOC,MAAM,GAAI,GAAIrD,KAAKS,OAClFgG,IAAI,SAAS,KACTzG,KAAKuI,UAAU7I,OAAO6E,OAClB+B,IACAT,EAAkB6D,YAAc,EAChC7D,EAAkBiB,OACtB,IAEJP,EAAS7E,KAAK,IAAI,IAAI,OAAO,QAAQ,KAAK,OAAO,SACjD,MACJ,IAAK,aACD+E,IAAI,KAAK,KACDH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,KAAK,IAEnCuH,IAAI,KAAK,KACDH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,OAAO,IAErCuH,IAAI,KAAK,KACDH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,OAAO,IAErCuH,IAAI,KAAK,KACDH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,QAAQ,IAEtCuH,IAAI,MAAM,KACFH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,KAAK,IAEnCuH,IAAI,QAAQ,KACJH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,OAAO,IAErCuH,IAAI,QAAQ,KACJH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,OAAO,IAErCuH,IAAI,SAAS,KACLH,IACAJ,EAAYwD,YAAc,EAC1BxD,EAAYY,QAEhB9G,KAAKuI,UAAU7I,OAAOR,IAAI,QAAQ,IAEtCqH,EAAS7E,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,OAAO,SACjD,MACJ,QACIsH,QAAQC,IAAI,iBAExB,IC5SUnC,MACd,IAGA,MAAMuD,EAAY,CACd,kCACA,2CACA,yDACA,8DACA,+CACA,kCACA,sBACA,2DACA,mDACA,gDACA,2CACA,0CACA,4BACA,mCACA,wCACA,uBACA,oCACA,qCACA,uBACA,+CACA,uBAEJ,IAAIhK,EAAQ,EACRuH,EAAkBsC,aAAY,KAC9B,MAAMI,EAAU3I,KAAKC,MAAMD,KAAKE,SAAWwI,EAAUhJ,QACrD0F,SAASgB,eAAe,YAAYuB,UAAYe,EAAUC,GAC1DjK,GAAO,GACA,IAARA,E","sources":["webpack://untitled-game-of-microgames/./src/microgame.js","webpack://untitled-game-of-microgames/./src/sprite.js","webpack://untitled-game-of-microgames/./src/stage.js","webpack://untitled-game-of-microgames/./src/microgame_board.js","webpack://untitled-game-of-microgames/./src/index.js"],"sourcesContent":["class Microgame {\r\n    \r\n    constructor(stage, player, obstacles, bgm, objective, controlSetting, dialogue) {\r\n        this.stage = stage;\r\n        this.player = player;\r\n        this.obstacles = obstacles || [];\r\n        this.bgm = bgm;\r\n        this.objective = objective;\r\n        if(this.objective==='ddr') this.bgm.volume = 0.4;\r\n        this.won = false;\r\n        this.isGameOver = false;\r\n        this.controlSetting = controlSetting;\r\n        this.barAmount = 0;\r\n        this.dialogue = dialogue;\r\n\r\n        this.count = 0; //bandaid fix;\r\n        this.ddrAnswers = [];\r\n\r\n\r\n        this.timeOutFunc = null;\r\n    }\r\n\r\n    reset(ctx) {\r\n        this.won = false;\r\n        this.isGameOver = false;\r\n        this.barAmount = 0;\r\n        this.count = 0;\r\n        this.ddrAnswers = [];\r\n        if(this.timeOutFunc) clearTimeout(this.timeOutFunc);\r\n        this.timeOutFunc = null;\r\n        \r\n        this.player.reset(ctx);\r\n        for(const obstacle of this.obstacles) obstacle.reset(ctx, this.player);\r\n    }\r\n\r\n    stageAnimate(stageCtx) {\r\n        if(this.won === false) {\r\n            this.stage.animate(stageCtx);\r\n        }\r\n    }\r\n\r\n    fillBar(){\r\n        this.barAmount += this.player.mash();\r\n    }\r\n    \r\n    changeSprite(objective) {\r\n        if(objective === \"blowBar\") {\r\n            if(this.barAmount >= 100 ) {\r\n                this.player.sprite = progressImg['blowBar'][5];\r\n                this.won = true;\r\n            }\r\n            else if(this.barAmount >= 80) {\r\n                this.player.sprite = progressImg['blowBar'][4];\r\n            }\r\n            else if(this.barAmount >= 60) {\r\n                this.player.sprite = progressImg['blowBar'][3];\r\n            }\r\n            else if(this.barAmount >= 40) {\r\n                this.player.sprite = progressImg['blowBar'][2];\r\n            }\r\n            else if(this.barAmount >= 20) {\r\n                this.player.sprite = progressImg['blowBar'][1];\r\n            }\r\n            else {\r\n                this.player.sprite = progressImg['blowBar'][0];\r\n                \r\n            }\r\n        }\r\n        else if(objective === 'survive') {\r\n            for(const obstacle of this.obstacles) {\r\n                const idx = progressImg['star'].indexOf(obstacle.sprite)\r\n                obstacle.sprite = progressImg['star'][(idx+1)%progressImg['star'].length];\r\n            }\r\n            if(this.count === 0) {\r\n                const that = this;\r\n                that.timeOutFunc = setTimeout(function()   {\r\n                    if(that.player.isAlive) {\r\n                        that.won = true;\r\n                    }\r\n                }, 5000);\r\n            }\r\n            this.count += 1;\r\n        }\r\n        else if(objective === 'ddr') {\r\n            const that = this;\r\n            const dirs = ['up','down','left','right'];\r\n            if(this.ddrAnswers.length === 0) that.obstacles[0].sprite = null;\r\n            while(this.ddrAnswers.length < 4) {\r\n                this.ddrAnswers.push(dirs[Math.floor(Math.random() * dirs.length)]);\r\n                setTimeout(function() {\r\n                    that.obstacles[0].sprite = ddrArrows[that.ddrAnswers[that.count]][that.count];\r\n                    that.count++;\r\n                }, 400 * this.ddrAnswers.length);\r\n            }\r\n            if(this.ddrAnswers.length === 4) {\r\n                if(this.player.userInputs.length < 4) {\r\n                    switch(this.player.userInputs.at(-1)) {\r\n                        case \"up\":\r\n                            this.player.sprite = progressImg['ddr'][0];\r\n                            break;\r\n                        case 'down':\r\n                            this.player.sprite = progressImg['ddr'][1];\r\n                            break;\r\n                        case 'left':\r\n                            this.player.sprite = progressImg['ddr'][2];\r\n                            break;\r\n                        case 'right':\r\n                            this.player.sprite = progressImg['ddr'][3];\r\n                            break;\r\n                        default:\r\n                            this.player.sprite = progressImg['ddr'][6];\r\n                    }\r\n                }\r\n                else {\r\n                    if(JSON.stringify(this.player.userInputs) === JSON.stringify(this.ddrAnswers)) {\r\n                        this.player.sprite = progressImg['ddr'][4];\r\n                        this.won = true;\r\n                    }\r\n                    else {\r\n                        this.player.sprite = progressImg['ddr'][5];\r\n                        this.isGameOver = true;\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    spriteAnimate(spriteCtx) {\r\n        if(this.won === false && !this.isGameOver) {\r\n            if(!this.player.isAlive) {\r\n                this.isGameOver = true;\r\n            }\r\n            \r\n            this.changeSprite(this.objective);\r\n \r\n            for(const obstacle of this.obstacles) {\r\n\r\n                obstacle.animate(spriteCtx, this.ddrAnswers);\r\n                \r\n\r\n\r\n                if(obstacle.unitTypeArr.includes('enemy') && obstacle.collidesWith(this.player)) {\r\n                    this.player.isAlive = false;\r\n                    this.player.sprite = '../assets/space_balloon/space_balloon_death.png';\r\n                }\r\n            }\r\n            this.player.animate(spriteCtx);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nvar progressImg = {\r\n    blowBar: [\r\n        '../assets/blow/blow1.png',\r\n        '../assets/blow/blow2.png',\r\n        '../assets/blow/blow3.png',\r\n        '../assets/blow/blow4.png',\r\n        '../assets/blow/blow5.png',\r\n        '../assets/blow/blow6.png'\r\n    ],\r\n    spaceBalloon: [\r\n        '../assets/space_balloon/flap_default.png',\r\n        '../assets/space_balloon/flap_down.png',\r\n        '../assets/space_balloon/flap_up.png'\r\n    ],\r\n    star: [\r\n        '../assets/space_balloon/space_balloon_star1.png',\r\n        '../assets/space_balloon/space_balloon_star2.png',\r\n        '../assets/space_balloon/space_balloon_star3.png',\r\n        '../assets/space_balloon/space_balloon_star4.png'\r\n    ],\r\n    ddr: [\r\n        '../assets/ddr/up.png',\r\n        '../assets/ddr/down.png',\r\n        '../assets/ddr/left.png',\r\n        '../assets/ddr/right.png',\r\n        '../assets/ddr/victory.png',\r\n        '../assets/ddr/defeat.png',\r\n        '../assets/ddr/neutral.png'\r\n    ]\r\n}\r\nvar ddrArrows = {\r\n    up: ['../assets/ddr/up_arrow1.png', '../assets/ddr/up_arrow2.png'\r\n    , '../assets/ddr/up_arrow3.png', '../assets/ddr/up_arrow4.png'],\r\n    down: ['../assets/ddr/down_arrow1.png', '../assets/ddr/down_arrow2.png'\r\n    , '../assets/ddr/down_arrow3.png', '../assets/ddr/down_arrow4.png'],\r\n    left: ['../assets/ddr/left_arrow1.png', '../assets/ddr/left_arrow2.png'\r\n    , '../assets/ddr/left_arrow3.png', '../assets/ddr/left_arrow4.png'],\r\n    right: ['../assets/ddr/right_arrow1.png', '../assets/ddr/right_arrow2.png'\r\n    , '../assets/ddr/right_arrow3.png', '../assets/ddr/right_arrow4.png']\r\n}\r\n\r\n\r\nlet CONSTANTS = {\r\n    GRAVITY:  1,\r\n    FLAP_SPEED:  5,\r\n    TERMINAL_VEL:  5,\r\n    BAR_SPEED: 5\r\n}\r\n\r\nexport default Microgame;","class Sprite {\r\n\r\n    constructor(sprite, posType, unitTypeArr) {\r\n        this.xPos = 0;\r\n        this.yPos = 0;\r\n        this.sprite = sprite;\r\n        this.posType = posType;\r\n        this.unitTypeArr = unitTypeArr;\r\n        this.isAlive = true;\r\n        this.spriteWidth = null;\r\n        this.spriteHeight = null;\r\n        this.vel = 0;\r\n        this.isMidAir = false;\r\n        this.userInputs = [];\r\n    }\r\n\r\n    initializeSpritePos(ctx, player=null) {\r\n        if(this.posType === 'rightSide') {\r\n            if(this.sprite === 'assets/space_balloon/space_balloon_death.png') {\r\n                this.sprite = 'assets/space_balloon/flap_default.png'\r\n            }\r\n            this.xPos = Math.floor(ctx.canvas.width - ctx.canvas.width/3);\r\n            this.yPos = Math.floor(ctx.canvas.height/4);\r\n            \r\n            \r\n            CONSTANTS.FLAP_SPEED = Math.floor(ctx.canvas.height/80);\r\n            CONSTANTS.TERMINAL_VEL = Math.floor(ctx.canvas.height/80);\r\n            CONSTANTS.GRAVITY = Math.max(Math.floor(ctx.canvas.width/1000), 0.2);\r\n        }\r\n        else if(this.posType === 'bottomSide') {\r\n            this.xPos = Math.floor(ctx.canvas.width/2);\r\n            this.yPos = ctx.canvas.height;\r\n        }\r\n        else if(this.posType === 'topLeft') {\r\n            this.xPos = 0;\r\n            this.yPos = 0;\r\n        }\r\n        else if(this.posType === 'random' && this.unitTypeArr.includes('enemy')) {\r\n            if(player != null) {\r\n                do {\r\n                    this.xPos= ctx.canvas.width * Math.random();\r\n                } while(Math.abs(this.xPos - player.xPos) <= ctx.canvas.width/4);\r\n                \r\n                do {\r\n                    this.yPos= ctx.canvas.height * Math.random();\r\n                } while(Math.abs(this.yPos - player.yPos) <= ctx.canvas.height/4);\r\n            }\r\n            else {\r\n                this.xPos= (ctx.canvas.width * Math.random()) - ctx.canvas.width;\r\n                this.yPos= ctx.canvas.height * Math.random();\r\n            }\r\n        }\r\n    }\r\n\r\n    reset(ctx, player=this) {\r\n        this.isMidAir = false;\r\n        this.isAlive = true;\r\n        this.userInputs = [];\r\n        this.initializeSpritePos(ctx, player);\r\n    }\r\n\r\n    animate(ctx, options = null, foundArr = null) {\r\n        if(this.sprite) {\r\n            if(this.isMidAir) this.moveAir(ctx);\r\n            let image = new Image()\r\n            image.src = this.sprite;\r\n            const that = this; \r\n            \r\n            image.onload = function() {\r\n                that.spriteWidth = image.width;\r\n                that.spriteHeight = image.height;\r\n                \r\n                // when we decide to have multiple canvases \r\n                // ctx.clearRect(that.xPos, that.yPos, that.spriteWidth, that.spriteHeight);\r\n                // ctx.clearRect(0,0, ctx.canvas.width, ctx.canvas.height);\r\n                \r\n                if(that.posType.includes('wall')){\r\n                    that.xPos = ctx.canvas.width - that.spriteWidth\r\n                    that.spriteHeight =  ctx.canvas.height;\r\n                    // ctx.clearRect(0,0, ctx.canvas.width, ctx.canvas.height);\r\n                    ctx.drawImage(image, that.xPos , 0, that.spriteWidth, that.spriteHeight);\r\n                }\r\n                else if (that.posType.includes('rightSide')) {\r\n                    that.spriteWidth = image.width*3\r\n                    that.spriteHeight = image.height*3;\r\n                    if(that.isAlive) {\r\n                        ctx.drawImage(image, that.xPos + that.spriteWidth, that.yPos,\r\n                            that.spriteWidth, that.spriteHeight);\r\n                    }\r\n                    else {\r\n                        // that.clearSpace(ctx);\r\n                        ctx.drawImage(image, Math.floor(that.xPos + that.spriteWidth/3), that.yPos,\r\n                            that.spriteWidth, that.spriteHeight);\r\n                    }\r\n                }\r\n                else if (that.posType.includes('bottomSide')) {\r\n                    that.spriteWidth = image.width*3\r\n                    that.spriteHeight = image.height*3;\r\n                    ctx.drawImage(image, Math.floor(that.xPos-that.spriteWidth/2), that.yPos-that.spriteHeight,\r\n                        that.spriteWidth, that.spriteHeight);\r\n                }\r\n                else if (that.posType.includes('topLeft')) {\r\n                    that.spriteWidth = image.width;\r\n                    that.spriteHeight = image.height;\r\n                    ctx.drawImage(image, that.xPos, that.yPos,\r\n                        that.spriteWidth, that.spriteHeight);\r\n                    ctx.drawImage(image, ctx.canvas.width - that.spriteWidth, that.yPos,\r\n                        that.spriteWidth, that.spriteHeight);\r\n                }\r\n                else if (that.unitTypeArr.includes('enemy') && that.posType.includes('random')) {\r\n                    that.spriteWidth = image.width*3\r\n                    that.spriteHeight = image.height*3;\r\n                    that.xPos += 4;\r\n                    if(that.xPos >= ctx.canvas.width + that.spriteWidth) {\r\n                        that.initializeSpritePos(ctx);\r\n                    }\r\n                    ctx.drawImage(image, that.xPos + that.spriteWidth, that.yPos,\r\n                        that.spriteWidth, that.spriteHeight);\r\n                }\r\n\r\n                else {\r\n                    ctx.drawImage(image, that.xPos + image.width, that.yPos + image.height, ctx.canvas.width/10, ctx.canvas.height/10);\r\n                }\r\n                \r\n            };\r\n        }\r\n        // for testing purposes\r\n        // else {\r\n        //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        //     ctx.fillStyle = \"black\";\r\n        //     this.spriteWidth = ctx.canvas.width/10;\r\n        //     this.spriteHeight = ctx.canvas.height/10;\r\n        //     ctx.fillRect(this.xPos+this.spriteWidth , this.yPos+this.spriteHeight, this.spriteWidth , this.spriteHeight);\r\n        // }\r\n    }\r\n\r\n    move(dir, ctx) {\r\n        const newXPos = Math.floor(this.xPos + dir[0] + this.spriteWidth);\r\n        const newYPos = Math.floor(this.yPos + dir[1]);\r\n        if(newXPos >= 0 && newXPos <= ctx.canvas.width-this.spriteWidth && newYPos >= 0 && newYPos <= ctx.canvas.height-this.spriteHeight){\r\n            this.xPos += dir[0];\r\n            this.yPos += dir[1];\r\n        }\r\n    }\r\n    \r\n    enemyMove(dir, ctx) {\r\n        // const newXPos = Math.floor(this.xPos + dir[0] + this.spriteWidth);\r\n        // const newYPos = Math.floor(this.yPos + dir[1] + this.spriteHeight);\r\n        this.xPos += dir[0];\r\n        this.yPos += dir[1];\r\n    }\r\n\r\n    //usually for enemies\r\n    collidesWith(player) {\r\n      const overlap = (a, b) => {\r\n        if(a.xPos > b.xPos + b.spriteWidth || a.xPos + a.spriteWidth < b.xPos) return false;\r\n        if(a.yPos > b.yPos + b.spriteHeight || a.yPos + a.spriteHeight < b.yPos) return false;\r\n        return true;\r\n      };\r\n      let collision = false;\r\n      if(overlap(this, player)) {\r\n        collision = true;\r\n      }\r\n      return collision;\r\n    }\r\n\r\n    moveAir(ctx) {\r\n        this.isMidAir = true;\r\n        if(this.yPos < 0) {\r\n            this.yPos = 0;\r\n            this.vel = 0;\r\n        }\r\n        else {\r\n            if(this.yPos + this.spriteHeight>= ctx.canvas.height) {\r\n                this.yPos = ctx.canvas.height - this.spriteHeight;\r\n                this.isAlive = false;\r\n                this.sprite = 'assets/space_balloon/space_balloon_death.png';\r\n            }\r\n            else{\r\n                this.yPos += this.vel\r\n            }\r\n        }\r\n        this.vel += CONSTANTS.GRAVITY;\r\n        if (Math.abs(this.vel) > CONSTANTS.TERMINAL_VEL) {\r\n            if (this.vel > 0) {\r\n              this.vel = CONSTANTS.TERMINAL_VEL;\r\n            } \r\n            else {\r\n              this.vel = CONSTANTS.TERMINAL_VEL * -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    mash() {\r\n        return CONSTANTS.BAR_SPEED;\r\n    }\r\n\r\n    flap(){\r\n        this.vel = -1 * CONSTANTS.FLAP_SPEED;\r\n        this.sprite = 'assets/space_balloon/flap_down.png';\r\n        const that = this;\r\n        setTimeout(function() {\r\n            that.sprite = 'assets/space_balloon/flap_up.png';\r\n        },100);\r\n        setTimeout(function() {\r\n            that.sprite = 'assets/space_balloon/flap_default.png';\r\n        },200);\r\n    }\r\n\r\n    ddr(dir) {\r\n        this.userInputs.push(dir);\r\n    }\r\n\r\n}\r\n\r\nconst CONSTANTS = {\r\n    GRAVITY:  0.2,\r\n    FLAP_SPEED:  5,\r\n    TERMINAL_VEL:  5,\r\n    BAR_SPEED: 5\r\n} \r\n\r\n\r\nexport default Sprite;","class Stage {\r\n\r\n    constructor(stage, isAnimated){\r\n        this.stage = stage;\r\n        this.isAnimated = isAnimated;\r\n\r\n    }\r\n\r\n    animate(ctx) {\r\n        if(this.stage) {\r\n            let image = new Image()\r\n            image.src = this.stage;\r\n            const that = this;\r\n            if(this.isAnimated) {\r\n                image.onload = function() {\r\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                    shiftX -= 2;\r\n                    if(shiftX <= 0) {\r\n                        shiftX = 200;\r\n                        shiftY += ctx.canvas.height;\r\n                        if(shiftY >= image.height) {\r\n                            shiftY = 0;\r\n                        }\r\n                    }\r\n                    ctx.drawImage(image, shiftX, shiftY, 50, 200, \r\n                        0, 0, ctx.canvas.width, ctx.canvas.height);\r\n                    \r\n                };\r\n            }\r\n            else {\r\n                image.onload = function() {\r\n                    ctx.drawImage(image, 0, 0,ctx.canvas.width,ctx.canvas.height);\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            ctx.fillStyle = \"skyblue\";\r\n            ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);\r\n        }\r\n    }\r\n\r\n}\r\nexport default Stage;\r\nvar shiftX = 200;\r\nvar shiftY = 0;","import Microgame from './microgame'\r\nimport Sprite from './sprite'\r\nimport Stage from './stage'\r\n\r\nclass MicrogameBoard {\r\n    constructor() {\r\n        \r\n        // this.stageCtx = document.getElementById('stage_canvas').getContext('2d');\r\n        // this.spriteCtx = document.getElementById('sprite_canvas').getContext('2d');\r\n        this.ctx = document.getElementById('canvas').getContext('2d')\r\n        this.scoreEle = document.getElementById('score');\r\n        this.dialogue = document.getElementById('dialogue');\r\n        this.timerBar = document.getElementById('timer_bar');\r\n        // this.size = (Math.floor(this.stageCtx.canvas.width/100), Math.floor(this.stageCtx.canvas.height/100));\r\n        this.currTime = 10;\r\n        this.maxTime = 10;\r\n        this.score = 0; //temporary variable until we decide to make a larger version of this game\r\n        this.lives = 3;\r\n\r\n        this.microgame = null;\r\n        \r\n        this.running = false;\r\n        this.currMicrogameFinished = false;\r\n        this.restart = false;\r\n\r\n        this.timerTimeout = null;\r\n    }\r\n\r\n    //Status: COMPLETED\r\n    play() {\r\n        this.microgame = this.randomizeMicrogame();\r\n        if(this.microgame) {\r\n            \r\n            this.microgame.reset(this.ctx);\r\n            unbindKeys(); //in case if user refreshes\r\n            this.bindKeyHandlers(this.microgame);\r\n            if(this.microgame.objective === 'survive'){\r\n                this.timerBar.src = 'assets/survival_timer1.png';\r\n            }\r\n            this.resetTimer();\r\n            this.startTimer(); //start Timer\r\n            this.running = true;\r\n\r\n            this.animate();\r\n        }\r\n        else{\r\n            console.log(\"NO MICROGAME WAS SELECTED\");\r\n        }\r\n    }\r\n\r\n    //Status: COMPLETED\r\n    randomizeMicrogame() {\r\n        const microgames = Object.values(MICROGAMES);\r\n        const microgameIdx = Math.floor(Math.random() * microgames.length);\r\n        microgames[microgameIdx].reset(this.ctx);\r\n        \r\n        currBGM = microgames[microgameIdx].bgm;\r\n        if(!isMuted && currBGM) currBGM.play();\r\n        audioArr.push(microgames[microgameIdx].bgm);\r\n        this.dialogue.innerHTML = microgames[microgameIdx].dialogue;\r\n        return microgames[microgameIdx]; \r\n    }\r\n\r\n    //COMPLETED\r\n    animate() {\r\n        if(this.running === true) {\r\n            this.updateTimerbar();\r\n            if(!this.currMicrogameFinished && this.microgame.won === true || this.restart === true ||\r\n                this.microgame.isGameOver && this.lives > 1) \r\n                {\r\n                    clearInterval(this.timerTimeout);\r\n                    if(this.microgame.timeOutFunc) clearTimeout(this.microgame.timeOutFunc);\r\n                    \r\n                    unbindKeys();\r\n                    \r\n                    this.microgame.won = false;\r\n                    if(!this.restart && !this.microgame.isGameOver) {\r\n                        this.incrementScore();\r\n                        this.scoreEle.innerHTML = `Score: ${this.score}`;\r\n                    }\r\n                    \r\n                    this.currMicrogameFinished = true;\r\n                    \r\n                    if(victoryAudio.paused && !isMuted && !this.restart) {\r\n                        for(const audio of audioArr) {\r\n                            audio.pause();\r\n                            audio.currentTime = 0;\r\n                        }\r\n                        if(!this.microgame.isGameOver) {\r\n                            victoryAudio.play();\r\n                        }\r\n                    }\r\n                    if(this.microgame.isGameOver) {\r\n                        if(this.currTime === 0) {\r\n                            this.dialogue.innerHTML = \"SO ZETTA SLOW\";\r\n                        }\r\n                        else {\r\n                            this.dialogue.innerHTML = \"You Died\";\r\n                        }\r\n                        \r\n                        const heart = document.getElementById(`heart${this.lives}`);\r\n                        heart.style.display = 'none';\r\n                        this.lives--;\r\n                        if(!isMuted) {\r\n                            gameoverAudio.play();\r\n                        }\r\n                    }\r\n                    this.restart = false;\r\n                    this.microgame.isGameOver = false;\r\n                    //pop out BGM\r\n                    audioArr.pop();\r\n\r\n                    const that = this;\r\n                    // cancelAnimationFrame(request);\r\n                    // console.log(this.score);\r\n                    setTimeout(function() {\r\n                        that.microgame = that.randomizeMicrogame();\r\n                        that.bindKeyHandlers(that.microgame);\r\n                        // that.microgame.stageAnimate(that.ctx);\r\n                        that.resetTimer();\r\n                        that.startTimer();\r\n                        that.currMicrogameFinished = false;\r\n                        // that.microgame.spriteAnimate(that.ctx);\r\n                        \r\n                    }, 2500);\r\n            }\r\n            else if(this.lives <= 1 && this.microgame.isGameOver) {\r\n                unbindKeys();\r\n                currBGM = null;\r\n                clearInterval(this.timerTimeout);\r\n                this.dialogue.innerHTML = 'Game Over';\r\n                const that = this;\r\n                setTimeout(function() {\r\n                    that.dialogue.innerHTML = 'Press Q to Restart';\r\n                }, 3000)\r\n                for(const audio of audioArr) {\r\n                    audio.pause();\r\n                    audio.currentTime = 0;\r\n                }\r\n                if(this.microgame.controlSetting === 'flap') {\r\n                    \r\n                    if(!isMuted) spaceDeathAudio.play();\r\n                }\r\n                const heart = document.getElementById(`heart${this.lives}`);\r\n                heart.style.display = \"none\";\r\n                this.lives--;\r\n                if(!isMuted) {\r\n                    loserAudio.play();\r\n                }\r\n                this.running = false;\r\n            }\r\n            else if(this.currTime > 0 && !this.currMicrogameFinished) {\r\n                this.microgame.stageAnimate(this.ctx);\r\n                this.microgame.spriteAnimate(this.ctx);\r\n            }\r\n            window.requestAnimationFrame(this.animate.bind(this));\r\n            // request;\r\n        }\r\n        \r\n    }\r\n\r\n    incrementScore() {\r\n        this.score++;\r\n    }\r\n\r\n    startTimer() {\r\n        this.reduceTime();\r\n    }\r\n\r\n    stopTimer() {\r\n        clearTimeout(this.timerTimeout);\r\n    }\r\n\r\n    setMicrogame(microgame) {\r\n        this.microgame = microgame;\r\n    }\r\n\r\n    reduceMaxTimer() {\r\n        this.maxTime--;\r\n    }\r\n\r\n    reduceTime() {\r\n        const that = this;\r\n        that.timerTimeout = setInterval(()=> {\r\n            that.currTime--;\r\n            if(that.currTime === 0) {\r\n                if(this.microgame.objective != 'survive'){\r\n                    //only for non-survival\r\n                    that.timerBar.src = TIMERBAR.at(-1); \r\n                    that.microgame.isGameOver = true;\r\n                }\r\n                else{\r\n                    that.timerBar.src = SURVIVEBAR.at(-1); \r\n                }\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    resetTimer() {\r\n        if(this.microgame.objective === 'survive') {\r\n            console.log('true');\r\n            this.currTime = 5;\r\n            this.timerBar.src = SURVIVEBAR[0];\r\n        }\r\n        else{\r\n            this.currTime = this.maxTime;\r\n        \r\n            this.timerBar.src = TIMERBAR[0];\r\n        }\r\n        \r\n    }\r\n\r\n    updateTimerbar() {\r\n        let calculate = Math.floor(this.maxTime / 8);\r\n        if(this.microgame.objective === 'survive') {\r\n            calculate = 1;\r\n            for(let i = 0; i < 6; i++) {\r\n                if(this.currTime < calculate*i) {\r\n                    this.timerBar.src = SURVIVEBAR.at(-1*i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for(let i = 0; i < 9; i++) {\r\n                if(this.currTime < calculate*i) {\r\n                    this.timerBar.src = TIMERBAR.at(-1*i);\r\n                    break;\r\n                }\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    //COMPLETED except restart\r\n    bindKeyHandlers(microgame) {\r\n        \r\n        switch(microgame.controlSetting) {\r\n            case \"test\":\r\n                key('w', () => this.microgame.player.move([0, -this.ctx.canvas.height/50], this.ctx));\r\n                key('s', () => this.microgame.player.move([0, this.ctx.canvas.height/50], this.ctx));\r\n                key('a', () => this.microgame.player.move([-this.ctx.canvas.width/50, 0], this.ctx));\r\n                key('d', () => this.microgame.player.move([this.ctx.canvas.width/50, 0], this.ctx));\r\n                key('up', () => this.microgame.player.move([0, -this.ctx.canvas.height/50], this.ctx));\r\n                key('down', () => this.microgame.player.move([0, this.ctx.canvas.height/50], this.ctx));\r\n                key('left', () => this.microgame.player.move([-this.ctx.canvas.width/50, 0], this.ctx));\r\n                key('right', () => this.microgame.player.move([this.ctx.canvas.width/50, 0], this.ctx));\r\n                key('space', () => this.microgame.player.jump());\r\n                bindKeys.push('w','s','a','d','up','down','left','right','space');\r\n                break;\r\n            case \"spaceButtonMash\": \r\n                key('space', () => {\r\n                    this.microgame.fillBar();\r\n                    if(blowAudio.paused && !isMuted) blowAudio.play();\r\n                });\r\n                bindKeys.push('space');\r\n                break;\r\n            case \"flap\":\r\n                if(this.microgame) this.microgame.player.isMidAir = true;\r\n                key('a', () => this.microgame.player.move([-this.ctx.canvas.width/60, 0], this.ctx));\r\n                key('d', () => this.microgame.player.move([this.ctx.canvas.width/60, 0], this.ctx));\r\n                key('left', () => this.microgame.player.move([-this.ctx.canvas.width/60, 0], this.ctx));\r\n                key('right', () => this.microgame.player.move([this.ctx.canvas.width/60, 0], this.ctx));\r\n                key('space', () => {\r\n                    this.microgame.player.flap();\r\n                    if(!isMuted) {\r\n                        spaceBalloonAudio.currentTime = 0;\r\n                        spaceBalloonAudio.play();\r\n                    }\r\n                });\r\n                bindKeys.push('a','d','left','right','up','down','space');\r\n                break;\r\n            case \"directions\":\r\n                key('w', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('up');\r\n                });\r\n                key('s', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('down');\r\n                });\r\n                key('a', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('left');\r\n                });\r\n                key('d', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('right');\r\n                });\r\n                key('up', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('up');\r\n                });\r\n                key('down', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('down');\r\n                });\r\n                key('left', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('left');\r\n                });\r\n                key('right', () => {\r\n                    if(!isMuted) {\r\n                        selectAudio.currentTime = 0;\r\n                        selectAudio.play();\r\n                    }\r\n                    this.microgame.player.ddr('right');\r\n                });\r\n                bindKeys.push('w','s','a','d','up','down','left','right');\r\n                break;\r\n            default:\r\n                console.log(\"keybind error\");\r\n        }\r\n    }\r\n}\r\n\r\nconst STAGES = {\r\n    test: new Stage('assets/windrise-background.png', false),\r\n    blow: new Stage('assets/blow/blow.png', false),\r\n    spaceBalloon: new Stage('assets//space_balloon/space_balloon_background_og.png', true),\r\n    ddr: new Stage('assets/ddr/dfloor.png', false)\r\n};\r\n\r\nconst PLAYERS = {\r\n    test: new Sprite(null, 'random', ['player']),\r\n    blow: new Sprite('assets/blow/blow1.png', 'wallRight', ['player']),\r\n    spaceBalloon: new Sprite('assets/space_balloon/flap_default.png','rightSide',['player']),\r\n    ddr: new Sprite('assets/ddr/neutral.png', 'bottomSide', ['player'] )\r\n};\r\n\r\nconst OBSTACLES = {\r\n    test : [],\r\n    blow : [],\r\n    spaceBalloon : [\r\n        new Sprite('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star3.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star4.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star3.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star4.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']),\r\n        new Sprite('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight']),\r\n    ],\r\n    ddr: [\r\n        new Sprite('assets/ddr/up_arrow1.png', 'topLeft', ['friendly']),\r\n    ]\r\n};\r\n\r\nconst KEYS = {\r\n    test : \"test\",\r\n    blow : \"spaceButtonMash\",\r\n    spaceBalloon : \"flap\",\r\n    ddr: \"directions\"\r\n};\r\n\r\nconst MICROGAMES = {\r\n    // test: new Microgame(STAGES[\"test\"]\r\n    // , PLAYERS['test']\r\n    // , OBSTACLES['test'], null, null, KEYS[\"test\"]),\r\n    blow: new Microgame(STAGES['blow']\r\n    , PLAYERS['blow']\r\n    , OBSTACLES['blow'], new Audio(\"assets/blow/thar_he_blows.mp3\")\r\n    , \"blowBar\", KEYS[\"blow\"], \"Use Spacebar to Blow\"),\r\n    spaceBalloon: new Microgame(STAGES['spaceBalloon']\r\n    , PLAYERS['spaceBalloon']\r\n    , OBSTACLES['spaceBalloon'], new Audio(\"assets/space_balloon/space_balloon.mp3\")\r\n    , \"survive\", KEYS[\"spaceBalloon\"], \"Spacebar to Flap\"),\r\n    ddr: new Microgame(STAGES['ddr']\r\n    , PLAYERS['ddr']\r\n    , OBSTACLES['ddr'], new Audio(\"assets/ddr/dance.mp3\")\r\n    , \"ddr\", KEYS['ddr'], \"Follow the Arrows\")\r\n\r\n};\r\n\r\nlet TIMERBAR = [];\r\nfor(let i = 1; i < 10; i++) {\r\n    TIMERBAR.push(`assets/timer${i}.png`);\r\n}\r\n\r\nlet SURVIVEBAR = [];\r\nfor(let i = 1; i < 7; i++) {\r\n    SURVIVEBAR.push(`assets/survival_timer${i}.png`);\r\n}\r\n\r\n\r\nvar victoryAudio = new Audio('assets/victory.mp3');\r\nvar blowAudio  = new Audio('assets/blow/blow.ogg');\r\nvar spaceBalloonAudio = new Audio('assets/space_balloon/flap.mp3')\r\nvar spaceDeathAudio = new Audio('assets/space_balloon/balloon_burst.mp3');\r\nvar gameoverAudio = new Audio('assets/gameover.mp3')\r\nvar correctAudio = new Audio('assets/correct.mp3');\r\nvar wrongAudio = new Audio('assets/wrong.mp3');\r\nvar selectAudio = new Audio('assets/ddr/dance_select.mp3');\r\nvar loserAudio = new Audio('assets/loser.mp3');\r\n\r\nconst audioArr = [victoryAudio, blowAudio, spaceBalloonAudio, spaceDeathAudio\r\n    , gameoverAudio, correctAudio, wrongAudio, selectAudio, loserAudio];\r\n\r\nvar currBGM = null;\r\nvar isMuted = false;\r\n\r\nvar bindKeys = ['m','q'];\r\n\r\nkey('m', () => {\r\n    isMuted = !isMuted;\r\n    for(const audio of audioArr) audio.pause();\r\n    if(!isMuted && currBGM === audioArr.at(-1)) {\r\n        audioArr.at(-1).play();\r\n    }\r\n});\r\n\r\nfunction unbindKeys(){\r\n    while(bindKeys.length > 2) {\r\n        key.unbind(bindKeys.pop());\r\n    }\r\n}\r\n\r\nexport default MicrogameBoard;","import MicrogameBoard from \"./microgame_board\";\r\n\r\nconst canvas = document.querySelector(\"#canvas\");\r\nconst gameContainer = document.querySelector(\"#game_container\");\r\ncanvas.width = gameContainer.offsetWidth;\r\ncanvas.height = gameContainer.offsetHeight;\r\n\r\nlet isMuted = false;\r\nvar menuAudio = new Audio('assets/title/main_menu.mp3');\r\nmenuAudio.play();\r\nmenuAudio.volume = 0.3;\r\n    \r\nkey('m', () => {\r\n    if(menuAudio) {\r\n        isMuted = !isMuted;\r\n        menuAudio.pause();\r\n        if(!isMuted) menuAudio.play();\r\n    }\r\n});\r\nkey('q', () => {\r\n    window.location.reload();\r\n});\r\n\r\nconst startBtn = document.querySelector(\"#startButton\");\r\nconst func = function () {\r\n    startBtn.disabled = true;\r\n    menuAudio.pause();\r\n    menuAudio = null;\r\n    clearInterval(dialogueTimeout);\r\n    const gameContainer = document.querySelector(\"#game_container\");\r\n    canvas.width = gameContainer.offsetWidth;\r\n    canvas.height = gameContainer.offsetHeight;\r\n    document.querySelector(\"#canvas\").style.zIndex = 2;\r\n    const gameBoard = new MicrogameBoard(); \r\n    gameBoard.play();\r\n}\r\nstartBtn.addEventListener(\"click\", func);\r\n\r\nconst dialogues = [\r\n    'Let me be your CSS to your HTML',\r\n    \"Fork my heart because Im ready to commit\",\r\n    \"I must be an exception because you have sure caught me\",\r\n    \"If I pull and push it in, know that I am already committing\",\r\n    \"If you were a function, Id call you everyday\",\r\n    \"We can merge, without conflicts\",\r\n    \"You are my number 0\",\r\n    \"I cant wait to inject my SQL into your application layer\",\r\n    \"Are you an API, because Id like to REST with you\",\r\n    \"Are you garbage because I want to collect you\",\r\n    \"Those who use git arent afraid to commit\",\r\n    \"Are you a ES6, youve got some standards\",\r\n    \"You had me at Hello World\",\r\n    \"Im overflowing with love for you\",\r\n    \"You wanna check out my private fields\",\r\n    \"Sudo make love to me\",\r\n    \"You dont have bugs, only features\",\r\n    \"I will debug all your code forever\",\r\n    \"Can I request a pull\",\r\n    \"I can resolve my promise to love you forever\",\r\n    \"... Hello World ...\"\r\n];\r\nlet count = 1;\r\nlet dialogueTimeout = setInterval(() => {\r\n    const randIdx = Math.floor(Math.random() * dialogues.length);\r\n    document.getElementById('dialogue').innerHTML = dialogues[randIdx];\r\n    count++;\r\n}, count * 4000);"],"names":["progressImg","blowBar","spaceBalloon","star","ddr","ddrArrows","up","down","left","right","constructor","stage","player","obstacles","bgm","objective","controlSetting","dialogue","this","volume","won","isGameOver","barAmount","count","ddrAnswers","timeOutFunc","reset","ctx","clearTimeout","obstacle","stageAnimate","stageCtx","animate","fillBar","mash","changeSprite","sprite","idx","indexOf","length","that","setTimeout","isAlive","dirs","push","Math","floor","random","userInputs","at","JSON","stringify","spriteAnimate","spriteCtx","unitTypeArr","includes","collidesWith","CONSTANTS","GRAVITY","FLAP_SPEED","TERMINAL_VEL","BAR_SPEED","posType","xPos","yPos","spriteWidth","spriteHeight","vel","isMidAir","initializeSpritePos","canvas","width","height","max","abs","moveAir","image","Image","src","onload","drawImage","move","dir","newXPos","newYPos","enemyMove","collision","a","b","flap","isAnimated","clearRect","shiftX","shiftY","fillStyle","fillRect","STAGES","test","Stage","blow","PLAYERS","Sprite","OBSTACLES","MICROGAMES","Microgame","Audio","TIMERBAR","i","SURVIVEBAR","victoryAudio","blowAudio","spaceBalloonAudio","spaceDeathAudio","gameoverAudio","correctAudio","wrongAudio","selectAudio","loserAudio","audioArr","currBGM","isMuted","bindKeys","unbindKeys","key","unbind","pop","audio","pause","play","document","querySelector","gameContainer","offsetWidth","offsetHeight","menuAudio","window","location","reload","startBtn","addEventListener","disabled","clearInterval","dialogueTimeout","style","zIndex","getElementById","getContext","scoreEle","timerBar","currTime","maxTime","score","lives","microgame","running","currMicrogameFinished","restart","timerTimeout","randomizeMicrogame","bindKeyHandlers","resetTimer","startTimer","console","log","microgames","Object","values","microgameIdx","innerHTML","updateTimerbar","incrementScore","paused","currentTime","display","requestAnimationFrame","bind","reduceTime","stopTimer","setMicrogame","reduceMaxTimer","setInterval","calculate","jump","dialogues","randIdx"],"sourceRoot":""}