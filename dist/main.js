/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _microgame_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./microgame_board */ \"./src/microgame_board.js\");\n\nconst canvas = document.querySelector(\"#canvas\");\nconst gameContainer = document.querySelector(\"#game_container\");\ncanvas.width = gameContainer.offsetWidth;\ncanvas.height = gameContainer.offsetHeight;\nlet isMuted = false;\nvar menuAudio = new Audio('assets/title/main_menu.mp3');\nmenuAudio.play();\nmenuAudio.volume = 0.3;\nkey('m', () => {\n  if (menuAudio) {\n    isMuted = !isMuted;\n    menuAudio.pause();\n    if (!isMuted) menuAudio.play();\n  }\n});\nkey('q', () => {\n  window.location.reload();\n});\nconst startBtn = document.querySelector(\"#startButton\");\nconst func = function () {\n  startBtn.disabled = true;\n  menuAudio.pause();\n  menuAudio = null;\n  clearInterval(dialogueTimeout);\n  const gameContainer = document.querySelector(\"#game_container\");\n  canvas.width = gameContainer.offsetWidth;\n  canvas.height = gameContainer.offsetHeight;\n  document.querySelector(\"#canvas\").style.zIndex = 2;\n  const gameBoard = new _microgame_board__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  gameBoard.play();\n};\nstartBtn.addEventListener(\"click\", func);\nconst dialogues = ['Let me be your CSS to your HTML', \"Fork my heart because Im ready to commit\", \"I must be an exception because you have sure caught me\", \"If I pull and push it in, know that I am already committing\", \"If you were a function, Id call you everyday\", \"We can merge, without conflicts\", \"You are my number 0\", \"I cant wait to inject my SQL into your application layer\", \"Are you an API, because Id like to REST with you\", \"Are you garbage because I want to collect you\", \"Those who use git arent afraid to commit\", \"Are you a ES6, youve got some standards\", \"You had me at Hello World\", \"Im overflowing with love for you\", \"You wanna check out my private fields\", \"Sudo make love to me\", \"You dont have bugs, only features\", \"I will debug all your code forever\", \"Can I request a pull\", \"I can resolve my promise to love you forever\", \"... Hello World ...\"];\nlet count = 1;\nlet dialogueTimeout = setInterval(() => {\n  const randIdx = Math.floor(Math.random() * dialogues.length);\n  document.getElementById('dialogue').innerHTML = dialogues[randIdx];\n  count++;\n}, count * 4000);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WyJ3ZWJwYWNrOi8vdW50aXRsZWQtZ2FtZS1vZi1taWNyb2dhbWVzLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1pY3JvZ2FtZUJvYXJkIGZyb20gXCIuL21pY3JvZ2FtZV9ib2FyZFwiO1xyXG5cclxuY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYW52YXNcIik7XHJcbmNvbnN0IGdhbWVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2dhbWVfY29udGFpbmVyXCIpO1xyXG5jYW52YXMud2lkdGggPSBnYW1lQ29udGFpbmVyLm9mZnNldFdpZHRoO1xyXG5jYW52YXMuaGVpZ2h0ID0gZ2FtZUNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XHJcblxyXG5sZXQgaXNNdXRlZCA9IGZhbHNlO1xyXG52YXIgbWVudUF1ZGlvID0gbmV3IEF1ZGlvKCdhc3NldHMvdGl0bGUvbWFpbl9tZW51Lm1wMycpO1xyXG5tZW51QXVkaW8ucGxheSgpO1xyXG5tZW51QXVkaW8udm9sdW1lID0gMC4zO1xyXG4gICAgXHJcbmtleSgnbScsICgpID0+IHtcclxuICAgIGlmKG1lbnVBdWRpbykge1xyXG4gICAgICAgIGlzTXV0ZWQgPSAhaXNNdXRlZDtcclxuICAgICAgICBtZW51QXVkaW8ucGF1c2UoKTtcclxuICAgICAgICBpZighaXNNdXRlZCkgbWVudUF1ZGlvLnBsYXkoKTtcclxuICAgIH1cclxufSk7XHJcbmtleSgncScsICgpID0+IHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxufSk7XHJcblxyXG5jb25zdCBzdGFydEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhcnRCdXR0b25cIik7XHJcbmNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICBtZW51QXVkaW8ucGF1c2UoKTtcclxuICAgIG1lbnVBdWRpbyA9IG51bGw7XHJcbiAgICBjbGVhckludGVydmFsKGRpYWxvZ3VlVGltZW91dCk7XHJcbiAgICBjb25zdCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNnYW1lX2NvbnRhaW5lclwiKTtcclxuICAgIGNhbnZhcy53aWR0aCA9IGdhbWVDb250YWluZXIub2Zmc2V0V2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gZ2FtZUNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhbnZhc1wiKS5zdHlsZS56SW5kZXggPSAyO1xyXG4gICAgY29uc3QgZ2FtZUJvYXJkID0gbmV3IE1pY3JvZ2FtZUJvYXJkKCk7IFxyXG4gICAgZ2FtZUJvYXJkLnBsYXkoKTtcclxufVxyXG5zdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuYyk7XHJcblxyXG5jb25zdCBkaWFsb2d1ZXMgPSBbXHJcbiAgICAnTGV0IG1lIGJlIHlvdXIgQ1NTIHRvIHlvdXIgSFRNTCcsXHJcbiAgICBcIkZvcmsgbXkgaGVhcnQgYmVjYXVzZSBJbSByZWFkeSB0byBjb21taXRcIixcclxuICAgIFwiSSBtdXN0IGJlIGFuIGV4Y2VwdGlvbiBiZWNhdXNlIHlvdSBoYXZlIHN1cmUgY2F1Z2h0IG1lXCIsXHJcbiAgICBcIklmIEkgcHVsbCBhbmQgcHVzaCBpdCBpbiwga25vdyB0aGF0IEkgYW0gYWxyZWFkeSBjb21taXR0aW5nXCIsXHJcbiAgICBcIklmIHlvdSB3ZXJlIGEgZnVuY3Rpb24sIElkIGNhbGwgeW91IGV2ZXJ5ZGF5XCIsXHJcbiAgICBcIldlIGNhbiBtZXJnZSwgd2l0aG91dCBjb25mbGljdHNcIixcclxuICAgIFwiWW91IGFyZSBteSBudW1iZXIgMFwiLFxyXG4gICAgXCJJIGNhbnQgd2FpdCB0byBpbmplY3QgbXkgU1FMIGludG8geW91ciBhcHBsaWNhdGlvbiBsYXllclwiLFxyXG4gICAgXCJBcmUgeW91IGFuIEFQSSwgYmVjYXVzZSBJZCBsaWtlIHRvIFJFU1Qgd2l0aCB5b3VcIixcclxuICAgIFwiQXJlIHlvdSBnYXJiYWdlIGJlY2F1c2UgSSB3YW50IHRvIGNvbGxlY3QgeW91XCIsXHJcbiAgICBcIlRob3NlIHdobyB1c2UgZ2l0IGFyZW50IGFmcmFpZCB0byBjb21taXRcIixcclxuICAgIFwiQXJlIHlvdSBhIEVTNiwgeW91dmUgZ290IHNvbWUgc3RhbmRhcmRzXCIsXHJcbiAgICBcIllvdSBoYWQgbWUgYXQgSGVsbG8gV29ybGRcIixcclxuICAgIFwiSW0gb3ZlcmZsb3dpbmcgd2l0aCBsb3ZlIGZvciB5b3VcIixcclxuICAgIFwiWW91IHdhbm5hIGNoZWNrIG91dCBteSBwcml2YXRlIGZpZWxkc1wiLFxyXG4gICAgXCJTdWRvIG1ha2UgbG92ZSB0byBtZVwiLFxyXG4gICAgXCJZb3UgZG9udCBoYXZlIGJ1Z3MsIG9ubHkgZmVhdHVyZXNcIixcclxuICAgIFwiSSB3aWxsIGRlYnVnIGFsbCB5b3VyIGNvZGUgZm9yZXZlclwiLFxyXG4gICAgXCJDYW4gSSByZXF1ZXN0IGEgcHVsbFwiLFxyXG4gICAgXCJJIGNhbiByZXNvbHZlIG15IHByb21pc2UgdG8gbG92ZSB5b3UgZm9yZXZlclwiLFxyXG4gICAgXCIuLi4gSGVsbG8gV29ybGQgLi4uXCJcclxuXTtcclxubGV0IGNvdW50ID0gMTtcclxubGV0IGRpYWxvZ3VlVGltZW91dCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgIGNvbnN0IHJhbmRJZHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkaWFsb2d1ZXMubGVuZ3RoKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaWFsb2d1ZScpLmlubmVySFRNTCA9IGRpYWxvZ3Vlc1tyYW5kSWR4XTtcclxuICAgIGNvdW50Kys7XHJcbn0sIGNvdW50ICogNDAwMCk7Il0sIm5hbWVzIjpbIk1pY3JvZ2FtZUJvYXJkIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2FtZUNvbnRhaW5lciIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJpc011dGVkIiwibWVudUF1ZGlvIiwiQXVkaW8iLCJwbGF5Iiwidm9sdW1lIiwia2V5IiwicGF1c2UiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsInN0YXJ0QnRuIiwiZnVuYyIsImRpc2FibGVkIiwiY2xlYXJJbnRlcnZhbCIsImRpYWxvZ3VlVGltZW91dCIsInN0eWxlIiwiekluZGV4IiwiZ2FtZUJvYXJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpYWxvZ3VlcyIsImNvdW50Iiwic2V0SW50ZXJ2YWwiLCJyYW5kSWR4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/microgame.js":
/*!**************************!*\
  !*** ./src/microgame.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Microgame {\n  constructor(stage, player, obstacles, bgm, objective, controlSetting, dialogue) {\n    this.stage = stage;\n    this.player = player;\n    this.obstacles = obstacles || [];\n    this.bgm = bgm;\n    this.objective = objective;\n    if (this.objective === 'ddr') this.bgm.volume = 0.4;\n    this.won = false;\n    this.isGameOver = false;\n    this.controlSetting = controlSetting;\n    this.barAmount = 0;\n    this.dialogue = dialogue;\n    this.count = 0; //bandaid fix;\n    this.ddrAnswers = [];\n    this.timeOutFunc = null;\n  }\n  reset(ctx) {\n    this.won = false;\n    this.isGameOver = false;\n    this.barAmount = 0;\n    this.count = 0;\n    this.ddrAnswers = [];\n    if (this.timeOutFunc) clearTimeout(this.timeOutFunc);\n    this.timeOutFunc = null;\n    this.player.reset(ctx);\n    for (const obstacle of this.obstacles) obstacle.reset(ctx, this.player);\n  }\n  stageAnimate(stageCtx) {\n    if (this.won === false) {\n      this.stage.animate(stageCtx);\n    }\n  }\n  fillBar() {\n    this.barAmount += this.player.mash();\n  }\n  changeSprite(objective) {\n    if (objective === \"blowBar\") {\n      if (this.barAmount >= 100) {\n        this.player.sprite = progressImg['blowBar'][5];\n        this.won = true;\n      } else if (this.barAmount >= 80) {\n        this.player.sprite = progressImg['blowBar'][4];\n      } else if (this.barAmount >= 60) {\n        this.player.sprite = progressImg['blowBar'][3];\n      } else if (this.barAmount >= 40) {\n        this.player.sprite = progressImg['blowBar'][2];\n      } else if (this.barAmount >= 20) {\n        this.player.sprite = progressImg['blowBar'][1];\n      } else {\n        this.player.sprite = progressImg['blowBar'][0];\n      }\n    } else if (objective === 'survive') {\n      for (const obstacle of this.obstacles) {\n        const idx = progressImg['star'].indexOf(obstacle.sprite);\n        obstacle.sprite = progressImg['star'][(idx + 1) % progressImg['star'].length];\n      }\n      if (this.count === 0) {\n        const that = this;\n        that.timeOutFunc = setTimeout(function () {\n          if (that.player.isAlive) {\n            that.won = true;\n          }\n        }, 5000);\n      }\n      this.count += 1;\n    } else if (objective === 'ddr') {\n      const that = this;\n      const dirs = ['up', 'down', 'left', 'right'];\n      if (this.ddrAnswers.length === 0) that.obstacles[0].sprite = null;\n      while (this.ddrAnswers.length < 4) {\n        this.ddrAnswers.push(dirs[Math.floor(Math.random() * dirs.length)]);\n        setTimeout(function () {\n          that.obstacles[0].sprite = ddrArrows[that.ddrAnswers[that.count]][that.count];\n          that.count++;\n        }, 400 * this.ddrAnswers.length);\n      }\n      if (this.ddrAnswers.length === 4) {\n        if (this.player.userInputs.length < 4) {\n          switch (this.player.userInputs.at(-1)) {\n            case \"up\":\n              this.player.sprite = progressImg['ddr'][0];\n              break;\n            case 'down':\n              this.player.sprite = progressImg['ddr'][1];\n              break;\n            case 'left':\n              this.player.sprite = progressImg['ddr'][2];\n              break;\n            case 'right':\n              this.player.sprite = progressImg['ddr'][3];\n              break;\n            default:\n              this.player.sprite = progressImg['ddr'][6];\n          }\n        } else {\n          if (JSON.stringify(this.player.userInputs) === JSON.stringify(this.ddrAnswers)) {\n            this.player.sprite = progressImg['ddr'][4];\n            this.won = true;\n          } else {\n            this.player.sprite = progressImg['ddr'][5];\n            this.isGameOver = true;\n          }\n        }\n      }\n    }\n  }\n  spriteAnimate(spriteCtx) {\n    if (this.won === false && !this.isGameOver) {\n      if (!this.player.isAlive) {\n        this.isGameOver = true;\n      }\n      this.changeSprite(this.objective);\n      for (const obstacle of this.obstacles) {\n        obstacle.animate(spriteCtx, this.ddrAnswers);\n        if (obstacle.unitTypeArr.includes('enemy') && obstacle.collidesWith(this.player)) {\n          this.player.isAlive = false;\n          this.player.sprite = '../assets/space_balloon/space_balloon_death.png';\n        }\n      }\n      this.player.animate(spriteCtx);\n    }\n  }\n}\nvar progressImg = {\n  blowBar: ['../assets/blow/blow1.png', '../assets/blow/blow2.png', '../assets/blow/blow3.png', '../assets/blow/blow4.png', '../assets/blow/blow5.png', '../assets/blow/blow6.png'],\n  spaceBalloon: ['../assets/space_balloon/flap_default.png', '../assets/space_balloon/flap_down.png', '../assets/space_balloon/flap_up.png'],\n  star: ['../assets/space_balloon/space_balloon_star1.png', '../assets/space_balloon/space_balloon_star2.png', '../assets/space_balloon/space_balloon_star3.png', '../assets/space_balloon/space_balloon_star4.png'],\n  ddr: ['../assets/ddr/up.png', '../assets/ddr/down.png', '../assets/ddr/left.png', '../assets/ddr/right.png', '../assets/ddr/victory.png', '../assets/ddr/defeat.png', '../assets/ddr/neutral.png']\n};\nvar ddrArrows = {\n  up: ['../assets/ddr/up_arrow1.png', '../assets/ddr/up_arrow2.png', '../assets/ddr/up_arrow3.png', '../assets/ddr/up_arrow4.png'],\n  down: ['../assets/ddr/down_arrow1.png', '../assets/ddr/down_arrow2.png', '../assets/ddr/down_arrow3.png', '../assets/ddr/down_arrow4.png'],\n  left: ['../assets/ddr/left_arrow1.png', '../assets/ddr/left_arrow2.png', '../assets/ddr/left_arrow3.png', '../assets/ddr/left_arrow4.png'],\n  right: ['../assets/ddr/right_arrow1.png', '../assets/ddr/right_arrow2.png', '../assets/ddr/right_arrow3.png', '../assets/ddr/right_arrow4.png']\n};\nlet CONSTANTS = {\n  GRAVITY: 1,\n  FLAP_SPEED: 5,\n  TERMINAL_VEL: 5,\n  BAR_SPEED: 5\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Microgame);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/microgame.js\n");

/***/ }),

/***/ "./src/microgame_board.js":
/*!********************************!*\
  !*** ./src/microgame_board.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _microgame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./microgame */ \"./src/microgame.js\");\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sprite */ \"./src/sprite.js\");\n/* harmony import */ var _stage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stage */ \"./src/stage.js\");\n\n\n\nclass MicrogameBoard {\n  constructor() {\n    // this.stageCtx = document.getElementById('stage_canvas').getContext('2d');\n    // this.spriteCtx = document.getElementById('sprite_canvas').getContext('2d');\n    this.ctx = document.getElementById('canvas').getContext('2d');\n    this.scoreEle = document.getElementById('score');\n    this.dialogue = document.getElementById('dialogue');\n    this.timerBar = document.getElementById('timer_bar');\n    // this.size = (Math.floor(this.stageCtx.canvas.width/100), Math.floor(this.stageCtx.canvas.height/100));\n    this.currTime = 10;\n    this.maxTime = 10;\n    this.score = 0; //temporary variable until we decide to make a larger version of this game\n    this.lives = 3;\n    this.microgame = null;\n    this.running = false;\n    this.currMicrogameFinished = false;\n    this.restart = false;\n    this.timerTimeout = null;\n  }\n\n  //Status: COMPLETED\n  play() {\n    this.microgame = this.randomizeMicrogame();\n    if (this.microgame) {\n      this.microgame.reset(this.ctx);\n      unbindKeys(); //in case if user refreshes\n      this.bindKeyHandlers(this.microgame);\n      if (this.microgame.objective === 'survive') {\n        this.timerBar.src = 'assets/survival_timer1.png';\n      }\n      this.resetTimer();\n      this.startTimer(); //start Timer\n      this.running = true;\n      this.animate();\n    } else {\n      console.log(\"NO MICROGAME WAS SELECTED\");\n    }\n  }\n\n  //Status: COMPLETED\n  randomizeMicrogame() {\n    const microgames = Object.values(MICROGAMES);\n    const microgameIdx = Math.floor(Math.random() * microgames.length);\n    microgames[microgameIdx].reset(this.ctx);\n    currBGM = microgames[microgameIdx].bgm;\n    if (!isMuted && currBGM) currBGM.play();\n    audioArr.push(microgames[microgameIdx].bgm);\n    this.dialogue.innerHTML = microgames[microgameIdx].dialogue;\n    return microgames[microgameIdx];\n  }\n\n  //COMPLETED\n  animate() {\n    if (this.running === true) {\n      this.updateTimerbar();\n      if (!this.currMicrogameFinished && this.microgame.won === true || this.restart === true || this.microgame.isGameOver && this.lives > 1) {\n        clearInterval(this.timerTimeout);\n        if (this.microgame.timeOutFunc) clearTimeout(this.microgame.timeOutFunc);\n        unbindKeys();\n        this.microgame.won = false;\n        if (!this.restart && !this.microgame.isGameOver) {\n          this.incrementScore();\n          this.scoreEle.innerHTML = `Score: ${this.score}`;\n        }\n        this.currMicrogameFinished = true;\n        if (victoryAudio.paused && !isMuted && !this.restart) {\n          for (const audio of audioArr) {\n            audio.pause();\n            audio.currentTime = 0;\n          }\n          if (!this.microgame.isGameOver) {\n            victoryAudio.play();\n          }\n        }\n        if (this.microgame.isGameOver) {\n          if (this.currTime === 0) {\n            this.dialogue.innerHTML = \"SO ZETTA SLOW\";\n          } else {\n            this.dialogue.innerHTML = \"You Died\";\n          }\n          const heart = document.getElementById(`heart${this.lives}`);\n          heart.style.display = 'none';\n          this.lives--;\n          if (!isMuted) {\n            gameoverAudio.play();\n          }\n        }\n        this.restart = false;\n        this.microgame.isGameOver = false;\n        //pop out BGM\n        audioArr.pop();\n        const that = this;\n        // cancelAnimationFrame(request);\n        // console.log(this.score);\n        setTimeout(function () {\n          that.microgame = that.randomizeMicrogame();\n          that.bindKeyHandlers(that.microgame);\n          // that.microgame.stageAnimate(that.ctx);\n          that.resetTimer();\n          that.startTimer();\n          that.currMicrogameFinished = false;\n          // that.microgame.spriteAnimate(that.ctx);\n        }, 2500);\n      } else if (this.lives <= 1 && this.microgame.isGameOver) {\n        unbindKeys();\n        currBGM = null;\n        clearInterval(this.timerTimeout);\n        this.dialogue.innerHTML = 'Game Over';\n        const that = this;\n        setTimeout(function () {\n          that.dialogue.innerHTML = 'Press Q to Restart';\n        }, 3000);\n        for (const audio of audioArr) {\n          audio.pause();\n          audio.currentTime = 0;\n        }\n        if (this.microgame.controlSetting === 'flap') {\n          if (!isMuted) spaceDeathAudio.play();\n        }\n        const heart = document.getElementById(`heart${this.lives}`);\n        heart.style.display = \"none\";\n        this.lives--;\n        if (!isMuted) {\n          loserAudio.play();\n        }\n        this.running = false;\n      } else if (this.currTime > 0 && !this.currMicrogameFinished) {\n        this.microgame.stageAnimate(this.ctx);\n        this.microgame.spriteAnimate(this.ctx);\n      }\n      window.requestAnimationFrame(this.animate.bind(this));\n      // request;\n    }\n  }\n\n  incrementScore() {\n    this.score++;\n  }\n  startTimer() {\n    this.reduceTime();\n  }\n  stopTimer() {\n    clearTimeout(this.timerTimeout);\n  }\n  setMicrogame(microgame) {\n    this.microgame = microgame;\n  }\n  reduceMaxTimer() {\n    this.maxTime--;\n  }\n  reduceTime() {\n    const that = this;\n    that.timerTimeout = setInterval(() => {\n      that.currTime--;\n      if (that.currTime === 0) {\n        if (this.microgame.objective != 'survive') {\n          //only for non-survival\n          that.timerBar.src = TIMERBAR.at(-1);\n          that.microgame.isGameOver = true;\n        } else {\n          that.timerBar.src = SURVIVEBAR.at(-1);\n        }\n      }\n    }, 1000);\n  }\n  resetTimer() {\n    if (this.microgame.objective === 'survive') {\n      console.log('true');\n      this.currTime = 5;\n      this.timerBar.src = SURVIVEBAR[0];\n    } else {\n      this.currTime = this.maxTime;\n      this.timerBar.src = TIMERBAR[0];\n    }\n  }\n  updateTimerbar() {\n    let calculate = Math.floor(this.maxTime / 8);\n    if (this.microgame.objective === 'survive') {\n      calculate = 1;\n      for (let i = 0; i < 6; i++) {\n        if (this.currTime < calculate * i) {\n          this.timerBar.src = SURVIVEBAR.at(-1 * i);\n          break;\n        }\n      }\n    } else {\n      for (let i = 0; i < 9; i++) {\n        if (this.currTime < calculate * i) {\n          this.timerBar.src = TIMERBAR.at(-1 * i);\n          break;\n        }\n      }\n    }\n  }\n\n  //COMPLETED except restart\n  bindKeyHandlers(microgame) {\n    switch (microgame.controlSetting) {\n      case \"test\":\n        key('w', () => this.microgame.player.move([0, -this.ctx.canvas.height / 50], this.ctx));\n        key('s', () => this.microgame.player.move([0, this.ctx.canvas.height / 50], this.ctx));\n        key('a', () => this.microgame.player.move([-this.ctx.canvas.width / 50, 0], this.ctx));\n        key('d', () => this.microgame.player.move([this.ctx.canvas.width / 50, 0], this.ctx));\n        key('up', () => this.microgame.player.move([0, -this.ctx.canvas.height / 50], this.ctx));\n        key('down', () => this.microgame.player.move([0, this.ctx.canvas.height / 50], this.ctx));\n        key('left', () => this.microgame.player.move([-this.ctx.canvas.width / 50, 0], this.ctx));\n        key('right', () => this.microgame.player.move([this.ctx.canvas.width / 50, 0], this.ctx));\n        key('space', () => this.microgame.player.jump());\n        bindKeys.push('w', 's', 'a', 'd', 'up', 'down', 'left', 'right', 'space');\n        break;\n      case \"spaceButtonMash\":\n        key('space', () => {\n          this.microgame.fillBar();\n          if (blowAudio.paused && !isMuted) blowAudio.play();\n        });\n        bindKeys.push('space');\n        break;\n      case \"flap\":\n        if (this.microgame) this.microgame.player.isMidAir = true;\n        key('a', () => this.microgame.player.move([-this.ctx.canvas.width / 60, 0], this.ctx));\n        key('d', () => this.microgame.player.move([this.ctx.canvas.width / 60, 0], this.ctx));\n        key('left', () => this.microgame.player.move([-this.ctx.canvas.width / 60, 0], this.ctx));\n        key('right', () => this.microgame.player.move([this.ctx.canvas.width / 60, 0], this.ctx));\n        key('space', () => {\n          this.microgame.player.flap();\n          if (!isMuted) {\n            spaceBalloonAudio.currentTime = 0;\n            spaceBalloonAudio.play();\n          }\n        });\n        bindKeys.push('a', 'd', 'left', 'right', 'up', 'down', 'space');\n        break;\n      case \"directions\":\n        key('w', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('up');\n        });\n        key('s', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('down');\n        });\n        key('a', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('left');\n        });\n        key('d', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('right');\n        });\n        key('up', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('up');\n        });\n        key('down', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('down');\n        });\n        key('left', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('left');\n        });\n        key('right', () => {\n          if (!isMuted) {\n            selectAudio.currentTime = 0;\n            selectAudio.play();\n          }\n          this.microgame.player.ddr('right');\n        });\n        bindKeys.push('w', 's', 'a', 'd', 'up', 'down', 'left', 'right');\n        break;\n      default:\n        console.log(\"keybind error\");\n    }\n  }\n}\nconst STAGES = {\n  test: new _stage__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('assets/windrise-background.png', false),\n  blow: new _stage__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('assets/blow/blow.png', false),\n  spaceBalloon: new _stage__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('assets//space_balloon/space_balloon_background_og.png', true),\n  ddr: new _stage__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('assets/ddr/dfloor.png', false)\n};\nconst PLAYERS = {\n  test: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"](null, 'random', ['player']),\n  blow: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/blow/blow1.png', 'wallRight', ['player']),\n  spaceBalloon: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/flap_default.png', 'rightSide', ['player']),\n  ddr: new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/ddr/neutral.png', 'bottomSide', ['player'])\n};\nconst OBSTACLES = {\n  test: [],\n  blow: [],\n  spaceBalloon: [new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star3.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star4.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star3.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star4.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star1.png', 'random', ['enemy', 'movingRight']), new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/space_balloon/space_balloon_star2.png', 'random', ['enemy', 'movingRight'])],\n  ddr: [new _sprite__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('assets/ddr/up_arrow1.png', 'topLeft', ['friendly'])]\n};\nconst KEYS = {\n  test: \"test\",\n  blow: \"spaceButtonMash\",\n  spaceBalloon: \"flap\",\n  ddr: \"directions\"\n};\nconst MICROGAMES = {\n  // test: new Microgame(STAGES[\"test\"]\n  // , PLAYERS['test']\n  // , OBSTACLES['test'], null, null, KEYS[\"test\"]),\n  blow: new _microgame__WEBPACK_IMPORTED_MODULE_0__[\"default\"](STAGES['blow'], PLAYERS['blow'], OBSTACLES['blow'], new Audio(\"assets/blow/thar_he_blows.mp3\"), \"blowBar\", KEYS[\"blow\"], \"Use Spacebar to Blow\"),\n  spaceBalloon: new _microgame__WEBPACK_IMPORTED_MODULE_0__[\"default\"](STAGES['spaceBalloon'], PLAYERS['spaceBalloon'], OBSTACLES['spaceBalloon'], new Audio(\"assets/space_balloon/space_balloon.mp3\"), \"survive\", KEYS[\"spaceBalloon\"], \"Spacebar to Flap\"),\n  ddr: new _microgame__WEBPACK_IMPORTED_MODULE_0__[\"default\"](STAGES['ddr'], PLAYERS['ddr'], OBSTACLES['ddr'], new Audio(\"assets/ddr/dance.mp3\"), \"ddr\", KEYS['ddr'], \"Follow the Arrows\")\n};\nlet TIMERBAR = [];\nfor (let i = 1; i < 10; i++) {\n  TIMERBAR.push(`assets/timer${i}.png`);\n}\nlet SURVIVEBAR = [];\nfor (let i = 1; i < 7; i++) {\n  SURVIVEBAR.push(`assets/survival_timer${i}.png`);\n}\nvar victoryAudio = new Audio('assets/victory.mp3');\nvar blowAudio = new Audio('assets/blow/blow.ogg');\nvar spaceBalloonAudio = new Audio('assets/space_balloon/flap.mp3');\nvar spaceDeathAudio = new Audio('assets/space_balloon/balloon_burst.mp3');\nvar gameoverAudio = new Audio('assets/gameover.mp3');\nvar correctAudio = new Audio('assets/correct.mp3');\nvar wrongAudio = new Audio('assets/wrong.mp3');\nvar selectAudio = new Audio('assets/ddr/dance_select.mp3');\nvar loserAudio = new Audio('assets/loser.mp3');\nconst audioArr = [victoryAudio, blowAudio, spaceBalloonAudio, spaceDeathAudio, gameoverAudio, correctAudio, wrongAudio, selectAudio, loserAudio];\nvar currBGM = null;\nvar isMuted = false;\nvar bindKeys = ['m', 'q'];\nkey('m', () => {\n  isMuted = !isMuted;\n  for (const audio of audioArr) audio.pause();\n  if (!isMuted && currBGM === audioArr.at(-1)) {\n    audioArr.at(-1).play();\n  }\n});\nfunction unbindKeys() {\n  while (bindKeys.length > 2) {\n    key.unbind(bindKeys.pop());\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MicrogameBoard);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/microgame_board.js\n");

/***/ }),

/***/ "./src/sprite.js":
/*!***********************!*\
  !*** ./src/sprite.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Sprite {\n  constructor(sprite, posType, unitTypeArr) {\n    this.xPos = 0;\n    this.yPos = 0;\n    this.sprite = sprite;\n    this.posType = posType;\n    this.unitTypeArr = unitTypeArr;\n    this.isAlive = true;\n    this.spriteWidth = null;\n    this.spriteHeight = null;\n    this.vel = 0;\n    this.isMidAir = false;\n    this.userInputs = [];\n  }\n  initializeSpritePos(ctx) {\n    let player = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (this.posType === 'rightSide') {\n      if (this.sprite === 'assets/space_balloon/space_balloon_death.png') {\n        this.sprite = 'assets/space_balloon/flap_default.png';\n      }\n      this.xPos = Math.floor(ctx.canvas.width - ctx.canvas.width / 3);\n      this.yPos = Math.floor(ctx.canvas.height / 4);\n      CONSTANTS.FLAP_SPEED = Math.floor(ctx.canvas.height / 65);\n      CONSTANTS.TERMINAL_VEL = Math.floor(ctx.canvas.height / 65);\n      CONSTANTS.GRAVITY = Math.max(Math.floor(ctx.canvas.width / 2000), 0.1);\n    } else if (this.posType === 'bottomSide') {\n      this.xPos = Math.floor(ctx.canvas.width / 2);\n      this.yPos = ctx.canvas.height;\n    } else if (this.posType === 'topLeft') {\n      this.xPos = 0;\n      this.yPos = 0;\n    } else if (this.posType === 'random' && this.unitTypeArr.includes('enemy')) {\n      if (player != null) {\n        do {\n          this.xPos = ctx.canvas.width * Math.random();\n        } while (Math.abs(this.xPos - player.xPos) <= ctx.canvas.width / 4);\n        do {\n          this.yPos = ctx.canvas.height * Math.random();\n        } while (Math.abs(this.yPos - player.yPos) <= ctx.canvas.height / 4);\n      } else {\n        this.xPos = ctx.canvas.width * Math.random() - ctx.canvas.width;\n        this.yPos = ctx.canvas.height * Math.random();\n      }\n    }\n  }\n  reset(ctx) {\n    let player = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    this.isMidAir = false;\n    this.isAlive = true;\n    this.userInputs = [];\n    this.initializeSpritePos(ctx, player);\n  }\n  animate(ctx) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let foundArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (this.sprite) {\n      if (this.isMidAir) this.moveAir(ctx);\n      let image = new Image();\n      image.src = this.sprite;\n      const that = this;\n      image.onload = function () {\n        that.spriteWidth = image.width;\n        that.spriteHeight = image.height;\n\n        // when we decide to have multiple canvases \n        // ctx.clearRect(that.xPos, that.yPos, that.spriteWidth, that.spriteHeight);\n        // ctx.clearRect(0,0, ctx.canvas.width, ctx.canvas.height);\n\n        if (that.posType.includes('wall')) {\n          that.xPos = ctx.canvas.width - that.spriteWidth;\n          that.spriteHeight = ctx.canvas.height;\n          // ctx.clearRect(0,0, ctx.canvas.width, ctx.canvas.height);\n          ctx.drawImage(image, that.xPos, 0, that.spriteWidth, that.spriteHeight);\n        } else if (that.posType.includes('rightSide')) {\n          that.spriteWidth = image.width * 3;\n          that.spriteHeight = image.height * 3;\n          if (that.isAlive) {\n            ctx.drawImage(image, that.xPos + that.spriteWidth, that.yPos, that.spriteWidth, that.spriteHeight);\n          } else {\n            // that.clearSpace(ctx);\n            ctx.drawImage(image, Math.floor(that.xPos + that.spriteWidth / 3), that.yPos, that.spriteWidth, that.spriteHeight);\n          }\n        } else if (that.posType.includes('bottomSide')) {\n          that.spriteWidth = image.width * 3;\n          that.spriteHeight = image.height * 3;\n          ctx.drawImage(image, Math.floor(that.xPos - that.spriteWidth / 2), that.yPos - that.spriteHeight, that.spriteWidth, that.spriteHeight);\n        } else if (that.posType.includes('topLeft')) {\n          that.spriteWidth = image.width;\n          that.spriteHeight = image.height;\n          ctx.drawImage(image, that.xPos, that.yPos, that.spriteWidth, that.spriteHeight);\n          ctx.drawImage(image, ctx.canvas.width - that.spriteWidth, that.yPos, that.spriteWidth, that.spriteHeight);\n        } else if (that.unitTypeArr.includes('enemy') && that.posType.includes('random')) {\n          that.spriteWidth = image.width * 3;\n          that.spriteHeight = image.height * 3;\n          that.xPos += 2;\n          if (that.xPos >= ctx.canvas.width + that.spriteWidth) {\n            that.initializeSpritePos(ctx);\n          }\n          ctx.drawImage(image, that.xPos + that.spriteWidth, that.yPos, that.spriteWidth, that.spriteHeight);\n        } else {\n          ctx.drawImage(image, that.xPos + image.width, that.yPos + image.height, ctx.canvas.width / 10, ctx.canvas.height / 10);\n        }\n      };\n    }\n    // for testing purposes\n    // else {\n    //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    //     ctx.fillStyle = \"black\";\n    //     this.spriteWidth = ctx.canvas.width/10;\n    //     this.spriteHeight = ctx.canvas.height/10;\n    //     ctx.fillRect(this.xPos+this.spriteWidth , this.yPos+this.spriteHeight, this.spriteWidth , this.spriteHeight);\n    // }\n  }\n\n  move(dir, ctx) {\n    const newXPos = Math.floor(this.xPos + dir[0] + this.spriteWidth);\n    const newYPos = Math.floor(this.yPos + dir[1]);\n    if (newXPos >= 0 && newXPos <= ctx.canvas.width - this.spriteWidth && newYPos >= 0 && newYPos <= ctx.canvas.height - this.spriteHeight) {\n      this.xPos += dir[0];\n      this.yPos += dir[1];\n    }\n  }\n  enemyMove(dir, ctx) {\n    // const newXPos = Math.floor(this.xPos + dir[0] + this.spriteWidth);\n    // const newYPos = Math.floor(this.yPos + dir[1] + this.spriteHeight);\n    this.xPos += dir[0];\n    this.yPos += dir[1];\n  }\n\n  //usually for enemies\n  collidesWith(player) {\n    const overlap = (a, b) => {\n      if (a.xPos > b.xPos + b.spriteWidth || a.xPos + a.spriteWidth < b.xPos) return false;\n      if (a.yPos > b.yPos + b.spriteHeight || a.yPos + a.spriteHeight < b.yPos) return false;\n      return true;\n    };\n    let collision = false;\n    if (overlap(this, player)) {\n      collision = true;\n    }\n    return collision;\n  }\n  moveAir(ctx) {\n    this.isMidAir = true;\n    if (this.yPos < 0) {\n      this.yPos = 0;\n      this.vel = 0;\n    } else {\n      if (this.yPos + this.spriteHeight >= ctx.canvas.height) {\n        this.yPos = ctx.canvas.height - this.spriteHeight;\n        this.isAlive = false;\n        this.sprite = 'assets/space_balloon/space_balloon_death.png';\n      } else {\n        this.yPos += this.vel;\n      }\n    }\n    this.vel += CONSTANTS.GRAVITY;\n    if (Math.abs(this.vel) > CONSTANTS.TERMINAL_VEL) {\n      if (this.vel > 0) {\n        this.vel = CONSTANTS.TERMINAL_VEL;\n      } else {\n        this.vel = CONSTANTS.TERMINAL_VEL * -1;\n      }\n    }\n  }\n  mash() {\n    return CONSTANTS.BAR_SPEED;\n  }\n  flap() {\n    this.vel = -1 * CONSTANTS.FLAP_SPEED;\n    this.sprite = 'assets/space_balloon/flap_down.png';\n    const that = this;\n    setTimeout(function () {\n      that.sprite = 'assets/space_balloon/flap_up.png';\n    }, 100);\n    setTimeout(function () {\n      that.sprite = 'assets/space_balloon/flap_default.png';\n    }, 200);\n  }\n  ddr(dir) {\n    this.userInputs.push(dir);\n  }\n}\nconst CONSTANTS = {\n  GRAVITY: 0.2,\n  FLAP_SPEED: 5,\n  TERMINAL_VEL: 5,\n  BAR_SPEED: 5\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sprite);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMyQyxJQUFJLENBQUNkLEdBQUcsQ0FBQztFQUM3QjtBQUVKO0FBRUEsTUFBTXBCLFNBQVMsR0FBRztFQUNkRyxPQUFPLEVBQUcsR0FBRztFQUNiRixVQUFVLEVBQUcsQ0FBQztFQUNkQyxZQUFZLEVBQUcsQ0FBQztFQUNoQjRCLFNBQVMsRUFBRTtBQUNmLENBQUM7QUFHRCwrREFBZW5ELE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bnRpdGxlZC1nYW1lLW9mLW1pY3JvZ2FtZXMvLi9zcmMvc3ByaXRlLmpzPzg4MzMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU3ByaXRlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzcHJpdGUsIHBvc1R5cGUsIHVuaXRUeXBlQXJyKSB7XHJcbiAgICAgICAgdGhpcy54UG9zID0gMDtcclxuICAgICAgICB0aGlzLnlQb3MgPSAwO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gc3ByaXRlO1xyXG4gICAgICAgIHRoaXMucG9zVHlwZSA9IHBvc1R5cGU7XHJcbiAgICAgICAgdGhpcy51bml0VHlwZUFyciA9IHVuaXRUeXBlQXJyO1xyXG4gICAgICAgIHRoaXMuaXNBbGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVXaWR0aCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zcHJpdGVIZWlnaHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmVsID0gMDtcclxuICAgICAgICB0aGlzLmlzTWlkQWlyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51c2VySW5wdXRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZVNwcml0ZVBvcyhjdHgsIHBsYXllcj1udWxsKSB7XHJcbiAgICAgICAgaWYodGhpcy5wb3NUeXBlID09PSAncmlnaHRTaWRlJykge1xyXG4gICAgICAgICAgICBpZih0aGlzLnNwcml0ZSA9PT0gJ2Fzc2V0cy9zcGFjZV9iYWxsb29uL3NwYWNlX2JhbGxvb25fZGVhdGgucG5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUgPSAnYXNzZXRzL3NwYWNlX2JhbGxvb24vZmxhcF9kZWZhdWx0LnBuZydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnhQb3MgPSBNYXRoLmZsb29yKGN0eC5jYW52YXMud2lkdGggLSBjdHguY2FudmFzLndpZHRoLzMpO1xyXG4gICAgICAgICAgICB0aGlzLnlQb3MgPSBNYXRoLmZsb29yKGN0eC5jYW52YXMuaGVpZ2h0LzQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIENPTlNUQU5UUy5GTEFQX1NQRUVEID0gTWF0aC5mbG9vcihjdHguY2FudmFzLmhlaWdodC82NSk7XHJcbiAgICAgICAgICAgIENPTlNUQU5UUy5URVJNSU5BTF9WRUwgPSBNYXRoLmZsb29yKGN0eC5jYW52YXMuaGVpZ2h0LzY1KTtcclxuICAgICAgICAgICAgQ09OU1RBTlRTLkdSQVZJVFkgPSBNYXRoLm1heChNYXRoLmZsb29yKGN0eC5jYW52YXMud2lkdGgvMjAwMCksIDAuMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5wb3NUeXBlID09PSAnYm90dG9tU2lkZScpIHtcclxuICAgICAgICAgICAgdGhpcy54UG9zID0gTWF0aC5mbG9vcihjdHguY2FudmFzLndpZHRoLzIpO1xyXG4gICAgICAgICAgICB0aGlzLnlQb3MgPSBjdHguY2FudmFzLmhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnBvc1R5cGUgPT09ICd0b3BMZWZ0Jykge1xyXG4gICAgICAgICAgICB0aGlzLnhQb3MgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnlQb3MgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMucG9zVHlwZSA9PT0gJ3JhbmRvbScgJiYgdGhpcy51bml0VHlwZUFyci5pbmNsdWRlcygnZW5lbXknKSkge1xyXG4gICAgICAgICAgICBpZihwbGF5ZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueFBvcz0gY3R4LmNhbnZhcy53aWR0aCAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlKE1hdGguYWJzKHRoaXMueFBvcyAtIHBsYXllci54UG9zKSA8PSBjdHguY2FudmFzLndpZHRoLzQpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55UG9zPSBjdHguY2FudmFzLmhlaWdodCAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlKE1hdGguYWJzKHRoaXMueVBvcyAtIHBsYXllci55UG9zKSA8PSBjdHguY2FudmFzLmhlaWdodC80KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueFBvcz0gKGN0eC5jYW52YXMud2lkdGggKiBNYXRoLnJhbmRvbSgpKSAtIGN0eC5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlQb3M9IGN0eC5jYW52YXMuaGVpZ2h0ICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXNldChjdHgsIHBsYXllcj10aGlzKSB7XHJcbiAgICAgICAgdGhpcy5pc01pZEFpciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNBbGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy51c2VySW5wdXRzID0gW107XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplU3ByaXRlUG9zKGN0eCwgcGxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlKGN0eCwgb3B0aW9ucyA9IG51bGwsIGZvdW5kQXJyID0gbnVsbCkge1xyXG4gICAgICAgIGlmKHRoaXMuc3ByaXRlKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXNNaWRBaXIpIHRoaXMubW92ZUFpcihjdHgpO1xyXG4gICAgICAgICAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKVxyXG4gICAgICAgICAgICBpbWFnZS5zcmMgPSB0aGlzLnNwcml0ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7IFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZVdpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZUhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSBkZWNpZGUgdG8gaGF2ZSBtdWx0aXBsZSBjYW52YXNlcyBcclxuICAgICAgICAgICAgICAgIC8vIGN0eC5jbGVhclJlY3QodGhhdC54UG9zLCB0aGF0LnlQb3MsIHRoYXQuc3ByaXRlV2lkdGgsIHRoYXQuc3ByaXRlSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIC8vIGN0eC5jbGVhclJlY3QoMCwwLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKHRoYXQucG9zVHlwZS5pbmNsdWRlcygnd2FsbCcpKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnhQb3MgPSBjdHguY2FudmFzLndpZHRoIC0gdGhhdC5zcHJpdGVXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3ByaXRlSGVpZ2h0ID0gIGN0eC5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN0eC5jbGVhclJlY3QoMCwwLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgdGhhdC54UG9zICwgMCwgdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC5zcHJpdGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhhdC5wb3NUeXBlLmluY2x1ZGVzKCdyaWdodFNpZGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3ByaXRlV2lkdGggPSBpbWFnZS53aWR0aCozXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVIZWlnaHQgPSBpbWFnZS5oZWlnaHQqMztcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGF0LmlzQWxpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgdGhhdC54UG9zICsgdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC55UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC5zcHJpdGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdC5jbGVhclNwYWNlKGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIE1hdGguZmxvb3IodGhhdC54UG9zICsgdGhhdC5zcHJpdGVXaWR0aC8zKSwgdGhhdC55UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC5zcHJpdGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoYXQucG9zVHlwZS5pbmNsdWRlcygnYm90dG9tU2lkZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVXaWR0aCA9IGltYWdlLndpZHRoKjNcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZUhlaWdodCA9IGltYWdlLmhlaWdodCozO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIE1hdGguZmxvb3IodGhhdC54UG9zLXRoYXQuc3ByaXRlV2lkdGgvMiksIHRoYXQueVBvcy10aGF0LnNwcml0ZUhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC5zcHJpdGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhhdC5wb3NUeXBlLmluY2x1ZGVzKCd0b3BMZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZVdpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zcHJpdGVIZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgdGhhdC54UG9zLCB0aGF0LnlQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc3ByaXRlV2lkdGgsIHRoYXQuc3ByaXRlSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBjdHguY2FudmFzLndpZHRoIC0gdGhhdC5zcHJpdGVXaWR0aCwgdGhhdC55UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZVdpZHRoLCB0aGF0LnNwcml0ZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGF0LnVuaXRUeXBlQXJyLmluY2x1ZGVzKCdlbmVteScpICYmIHRoYXQucG9zVHlwZS5pbmNsdWRlcygncmFuZG9tJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNwcml0ZVdpZHRoID0gaW1hZ2Uud2lkdGgqM1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3ByaXRlSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0KjM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC54UG9zICs9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhhdC54UG9zID49IGN0eC5jYW52YXMud2lkdGggKyB0aGF0LnNwcml0ZVdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW5pdGlhbGl6ZVNwcml0ZVBvcyhjdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCB0aGF0LnhQb3MgKyB0aGF0LnNwcml0ZVdpZHRoLCB0aGF0LnlQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc3ByaXRlV2lkdGgsIHRoYXQuc3ByaXRlSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCB0aGF0LnhQb3MgKyBpbWFnZS53aWR0aCwgdGhhdC55UG9zICsgaW1hZ2UuaGVpZ2h0LCBjdHguY2FudmFzLndpZHRoLzEwLCBjdHguY2FudmFzLmhlaWdodC8xMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZm9yIHRlc3RpbmcgcHVycG9zZXNcclxuICAgICAgICAvLyBlbHNlIHtcclxuICAgICAgICAvLyAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgLy8gICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuc3ByaXRlV2lkdGggPSBjdHguY2FudmFzLndpZHRoLzEwO1xyXG4gICAgICAgIC8vICAgICB0aGlzLnNwcml0ZUhlaWdodCA9IGN0eC5jYW52YXMuaGVpZ2h0LzEwO1xyXG4gICAgICAgIC8vICAgICBjdHguZmlsbFJlY3QodGhpcy54UG9zK3RoaXMuc3ByaXRlV2lkdGggLCB0aGlzLnlQb3MrdGhpcy5zcHJpdGVIZWlnaHQsIHRoaXMuc3ByaXRlV2lkdGggLCB0aGlzLnNwcml0ZUhlaWdodCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdmUoZGlyLCBjdHgpIHtcclxuICAgICAgICBjb25zdCBuZXdYUG9zID0gTWF0aC5mbG9vcih0aGlzLnhQb3MgKyBkaXJbMF0gKyB0aGlzLnNwcml0ZVdpZHRoKTtcclxuICAgICAgICBjb25zdCBuZXdZUG9zID0gTWF0aC5mbG9vcih0aGlzLnlQb3MgKyBkaXJbMV0pO1xyXG4gICAgICAgIGlmKG5ld1hQb3MgPj0gMCAmJiBuZXdYUG9zIDw9IGN0eC5jYW52YXMud2lkdGgtdGhpcy5zcHJpdGVXaWR0aCAmJiBuZXdZUG9zID49IDAgJiYgbmV3WVBvcyA8PSBjdHguY2FudmFzLmhlaWdodC10aGlzLnNwcml0ZUhlaWdodCl7XHJcbiAgICAgICAgICAgIHRoaXMueFBvcyArPSBkaXJbMF07XHJcbiAgICAgICAgICAgIHRoaXMueVBvcyArPSBkaXJbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBlbmVteU1vdmUoZGlyLCBjdHgpIHtcclxuICAgICAgICAvLyBjb25zdCBuZXdYUG9zID0gTWF0aC5mbG9vcih0aGlzLnhQb3MgKyBkaXJbMF0gKyB0aGlzLnNwcml0ZVdpZHRoKTtcclxuICAgICAgICAvLyBjb25zdCBuZXdZUG9zID0gTWF0aC5mbG9vcih0aGlzLnlQb3MgKyBkaXJbMV0gKyB0aGlzLnNwcml0ZUhlaWdodCk7XHJcbiAgICAgICAgdGhpcy54UG9zICs9IGRpclswXTtcclxuICAgICAgICB0aGlzLnlQb3MgKz0gZGlyWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdXN1YWxseSBmb3IgZW5lbWllc1xyXG4gICAgY29sbGlkZXNXaXRoKHBsYXllcikge1xyXG4gICAgICBjb25zdCBvdmVybGFwID0gKGEsIGIpID0+IHtcclxuICAgICAgICBpZihhLnhQb3MgPiBiLnhQb3MgKyBiLnNwcml0ZVdpZHRoIHx8IGEueFBvcyArIGEuc3ByaXRlV2lkdGggPCBiLnhQb3MpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZihhLnlQb3MgPiBiLnlQb3MgKyBiLnNwcml0ZUhlaWdodCB8fCBhLnlQb3MgKyBhLnNwcml0ZUhlaWdodCA8IGIueVBvcykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9O1xyXG4gICAgICBsZXQgY29sbGlzaW9uID0gZmFsc2U7XHJcbiAgICAgIGlmKG92ZXJsYXAodGhpcywgcGxheWVyKSkge1xyXG4gICAgICAgIGNvbGxpc2lvbiA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNvbGxpc2lvbjtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlQWlyKGN0eCkge1xyXG4gICAgICAgIHRoaXMuaXNNaWRBaXIgPSB0cnVlO1xyXG4gICAgICAgIGlmKHRoaXMueVBvcyA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy55UG9zID0gMDtcclxuICAgICAgICAgICAgdGhpcy52ZWwgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYodGhpcy55UG9zICsgdGhpcy5zcHJpdGVIZWlnaHQ+PSBjdHguY2FudmFzLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy55UG9zID0gY3R4LmNhbnZhcy5oZWlnaHQgLSB0aGlzLnNwcml0ZUhlaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGUgPSAnYXNzZXRzL3NwYWNlX2JhbGxvb24vc3BhY2VfYmFsbG9vbl9kZWF0aC5wbmcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlQb3MgKz0gdGhpcy52ZWxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZlbCArPSBDT05TVEFOVFMuR1JBVklUWTtcclxuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy52ZWwpID4gQ09OU1RBTlRTLlRFUk1JTkFMX1ZFTCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52ZWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy52ZWwgPSBDT05TVEFOVFMuVEVSTUlOQUxfVkVMO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnZlbCA9IENPTlNUQU5UUy5URVJNSU5BTF9WRUwgKiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtYXNoKCkge1xyXG4gICAgICAgIHJldHVybiBDT05TVEFOVFMuQkFSX1NQRUVEO1xyXG4gICAgfVxyXG5cclxuICAgIGZsYXAoKXtcclxuICAgICAgICB0aGlzLnZlbCA9IC0xICogQ09OU1RBTlRTLkZMQVBfU1BFRUQ7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUgPSAnYXNzZXRzL3NwYWNlX2JhbGxvb24vZmxhcF9kb3duLnBuZyc7XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhhdC5zcHJpdGUgPSAnYXNzZXRzL3NwYWNlX2JhbGxvb24vZmxhcF91cC5wbmcnO1xyXG4gICAgICAgIH0sMTAwKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGF0LnNwcml0ZSA9ICdhc3NldHMvc3BhY2VfYmFsbG9vbi9mbGFwX2RlZmF1bHQucG5nJztcclxuICAgICAgICB9LDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGRyKGRpcikge1xyXG4gICAgICAgIHRoaXMudXNlcklucHV0cy5wdXNoKGRpcik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jb25zdCBDT05TVEFOVFMgPSB7XHJcbiAgICBHUkFWSVRZOiAgMC4yLFxyXG4gICAgRkxBUF9TUEVFRDogIDUsXHJcbiAgICBURVJNSU5BTF9WRUw6ICA1LFxyXG4gICAgQkFSX1NQRUVEOiA1XHJcbn0gXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3ByaXRlOyJdLCJuYW1lcyI6WyJTcHJpdGUiLCJjb25zdHJ1Y3RvciIsInNwcml0ZSIsInBvc1R5cGUiLCJ1bml0VHlwZUFyciIsInhQb3MiLCJ5UG9zIiwiaXNBbGl2ZSIsInNwcml0ZVdpZHRoIiwic3ByaXRlSGVpZ2h0IiwidmVsIiwiaXNNaWRBaXIiLCJ1c2VySW5wdXRzIiwiaW5pdGlhbGl6ZVNwcml0ZVBvcyIsImN0eCIsInBsYXllciIsIk1hdGgiLCJmbG9vciIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiQ09OU1RBTlRTIiwiRkxBUF9TUEVFRCIsIlRFUk1JTkFMX1ZFTCIsIkdSQVZJVFkiLCJtYXgiLCJpbmNsdWRlcyIsInJhbmRvbSIsImFicyIsInJlc2V0IiwiYW5pbWF0ZSIsIm9wdGlvbnMiLCJmb3VuZEFyciIsIm1vdmVBaXIiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwidGhhdCIsIm9ubG9hZCIsImRyYXdJbWFnZSIsIm1vdmUiLCJkaXIiLCJuZXdYUG9zIiwibmV3WVBvcyIsImVuZW15TW92ZSIsImNvbGxpZGVzV2l0aCIsIm92ZXJsYXAiLCJhIiwiYiIsImNvbGxpc2lvbiIsIm1hc2giLCJCQVJfU1BFRUQiLCJmbGFwIiwic2V0VGltZW91dCIsImRkciIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/sprite.js\n");

/***/ }),

/***/ "./src/stage.js":
/*!**********************!*\
  !*** ./src/stage.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Stage {\n  constructor(stage, isAnimated) {\n    this.stage = stage;\n    this.isAnimated = isAnimated;\n  }\n  animate(ctx) {\n    if (this.stage) {\n      let image = new Image();\n      image.src = this.stage;\n      const that = this;\n      if (this.isAnimated) {\n        image.onload = function () {\n          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n          shiftX -= 2;\n          if (shiftX <= 0) {\n            shiftX = 200;\n            shiftY += ctx.canvas.height;\n            if (shiftY >= image.height) {\n              shiftY = 0;\n            }\n          }\n          ctx.drawImage(image, shiftX, shiftY, 50, 200, 0, 0, ctx.canvas.width, ctx.canvas.height);\n        };\n      } else {\n        image.onload = function () {\n          ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\n        };\n      }\n    } else {\n      ctx.fillStyle = \"skyblue\";\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    }\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Stage);\nvar shiftX = 200;\nvar shiftY = 0;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RhZ2UuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLEtBQUssQ0FBQztFQUVSQyxXQUFXLENBQUNDLEtBQUssRUFBRUMsVUFBVSxFQUFDO0lBQzFCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxVQUFVO0VBRWhDO0VBRUFDLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFO0lBQ1QsSUFBRyxJQUFJLENBQUNILEtBQUssRUFBRTtNQUNYLElBQUlJLEtBQUssR0FBRyxJQUFJQyxLQUFLLEVBQUU7TUFDdkJELEtBQUssQ0FBQ0UsR0FBRyxHQUFHLElBQUksQ0FBQ04sS0FBSztNQUN0QixNQUFNTyxJQUFJLEdBQUcsSUFBSTtNQUNqQixJQUFHLElBQUksQ0FBQ04sVUFBVSxFQUFFO1FBQ2hCRyxLQUFLLENBQUNJLE1BQU0sR0FBRyxZQUFXO1VBQ3RCTCxHQUFHLENBQUNNLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFTixHQUFHLENBQUNPLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFUixHQUFHLENBQUNPLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDO1VBQ3hEQyxNQUFNLElBQUksQ0FBQztVQUNYLElBQUdBLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDWkEsTUFBTSxHQUFHLEdBQUc7WUFDWkMsTUFBTSxJQUFJWCxHQUFHLENBQUNPLE1BQU0sQ0FBQ0UsTUFBTTtZQUMzQixJQUFHRSxNQUFNLElBQUlWLEtBQUssQ0FBQ1EsTUFBTSxFQUFFO2NBQ3ZCRSxNQUFNLEdBQUcsQ0FBQztZQUNkO1VBQ0o7VUFDQVgsR0FBRyxDQUFDWSxTQUFTLENBQUNYLEtBQUssRUFBRVMsTUFBTSxFQUFFQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFDeEMsQ0FBQyxFQUFFLENBQUMsRUFBRVgsR0FBRyxDQUFDTyxNQUFNLENBQUNDLEtBQUssRUFBRVIsR0FBRyxDQUFDTyxNQUFNLENBQUNFLE1BQU0sQ0FBQztRQUVsRCxDQUFDO01BQ0wsQ0FBQyxNQUNJO1FBQ0RSLEtBQUssQ0FBQ0ksTUFBTSxHQUFHLFlBQVc7VUFDdEJMLEdBQUcsQ0FBQ1ksU0FBUyxDQUFDWCxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQ0QsR0FBRyxDQUFDTyxNQUFNLENBQUNDLEtBQUssRUFBQ1IsR0FBRyxDQUFDTyxNQUFNLENBQUNFLE1BQU0sQ0FBQztRQUNqRSxDQUFDO01BQ0w7SUFDSixDQUFDLE1BQ0k7TUFDRFQsR0FBRyxDQUFDYSxTQUFTLEdBQUcsU0FBUztNQUN6QmIsR0FBRyxDQUFDYyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQ2QsR0FBRyxDQUFDTyxNQUFNLENBQUNDLEtBQUssRUFBQ1IsR0FBRyxDQUFDTyxNQUFNLENBQUNFLE1BQU0sQ0FBQztJQUN4RDtFQUNKO0FBRUo7QUFDQSwrREFBZWQsS0FBSyxFQUFDO0FBQ3JCLElBQUllLE1BQU0sR0FBRyxHQUFHO0FBQ2hCLElBQUlDLE1BQU0sR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW50aXRsZWQtZ2FtZS1vZi1taWNyb2dhbWVzLy4vc3JjL3N0YWdlLmpzPzdlZTUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU3RhZ2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0YWdlLCBpc0FuaW1hdGVkKXtcclxuICAgICAgICB0aGlzLnN0YWdlID0gc3RhZ2U7XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGVkID0gaXNBbmltYXRlZDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZShjdHgpIHtcclxuICAgICAgICBpZih0aGlzLnN0YWdlKSB7XHJcbiAgICAgICAgICAgIGxldCBpbWFnZSA9IG5ldyBJbWFnZSgpXHJcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IHRoaXMuc3RhZ2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzQW5pbWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY3R4LmNhbnZhcy53aWR0aCwgY3R4LmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0WCAtPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNoaWZ0WCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0WCA9IDIwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnRZICs9IGN0eC5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzaGlmdFkgPj0gaW1hZ2UuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdFkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHNoaWZ0WCwgc2hpZnRZLCA1MCwgMjAwLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgMCwgMCwgY3R4LmNhbnZhcy53aWR0aCwgY3R4LmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsY3R4LmNhbnZhcy53aWR0aCxjdHguY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJza3libHVlXCI7XHJcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLDAsY3R4LmNhbnZhcy53aWR0aCxjdHguY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBTdGFnZTtcclxudmFyIHNoaWZ0WCA9IDIwMDtcclxudmFyIHNoaWZ0WSA9IDA7Il0sIm5hbWVzIjpbIlN0YWdlIiwiY29uc3RydWN0b3IiLCJzdGFnZSIsImlzQW5pbWF0ZWQiLCJhbmltYXRlIiwiY3R4IiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsInRoYXQiLCJvbmxvYWQiLCJjbGVhclJlY3QiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsInNoaWZ0WCIsInNoaWZ0WSIsImRyYXdJbWFnZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/stage.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bnRpdGxlZC1nYW1lLW9mLW1pY3JvZ2FtZXMvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;